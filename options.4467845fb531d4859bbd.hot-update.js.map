{"version":3,"file":"options.4467845fb531d4859bbd.hot-update.js","mappingsgBA;;;;;;;;;;;;;;;AAAA;AACA;AAaA;AAOA;AACA;AASA;AACA;AACA;AACA;AAEA;AAEA;AAUA;AACA;AACA;AAMA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AAAA;AAAA;;;;;;;AACA;;;;;;;AACA;;;;;;;AACA;AAAA;AAAA;AAAA;;;;;;;AACA;;;;;;;;AAGA;AAVA;;AACA;;;AADA;AAYA;;AACA;AACA;AACA;AAEA;AACA;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAGA;AAAA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;;;;;;;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;;;;;;;;AAGA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;AAIA;AACA;AACA;;;;;;;AAIA;AACA;AACA;;;;;;;AAIA;AACA;AACA;;;;;;;AAIA;AACA;AACA;;;;;;;AAIA;AACA;AACA;;;;;;;AAIA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;AAIA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;;AAOA;AAvKA;;AACA;AAEA;;;AAHA;AAyKA;;AACA;AAEA;AACA;;;;;;;;AACA;AAAA;AAAA;AAEA;AACA;;;;;;;AACA;;;;;;;;AAGA;AAZA;;AACA;;;AADA;AAcA;;AACA;AACA;;;;;;;AAEA;;;;;;;AACA;AAAA;;;;;;;AACA;;;;;;;;AAGA;AATA;;AACA;;;AAUA;;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAKA;AA/BA;;AACA;AACA;;;AAFA;AAiCA;;AACA;AACA;AAIA;AACA;AACA;AACA;;;;;;;;AAKA;AAdA;;AACA;;;AADA;AAgBA;;AASA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAGA;AAEA;AAEA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAGA;AAAA;AAAA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAEA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAAA;;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAEA;AACA;AACA;AACA;;;;;;;AAGA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAMA;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAAA;;;;;;;;AAMA;AAMA;;;;;;;;AAGA;AA/QA;;AASA;AACA;AACA;AACA;;;AAZA;AAiRA;;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAIA;AA5BA;;AACA;;;AADA;AA8BA;;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;;;;;AACA;AAMA;AA1DA;;AAKA;AACA;AACA;;;AAPA;AA4DA;;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;AACA;;;;;;;;AACA;AACA;AACA;AACA;AACA;;;;;;;;AACA;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AACA;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;AACA;;;;;;;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;AACA;;;;;;;;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAKA;AAKA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAKA;AAKA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAKA;AAIA;AAxPA;;AACA;AACA;AACA;AACA;;;AAJA;AA0PA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;;;;;;;AAAA;AAKA;AAAA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;;;;;;;AACA;AACA;AACA;AACA;AACA;;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;;;;;;;AAIA;AAAA;AAAA;;;;;;;AACA;AACA;AACA;AACA;;;;;;;;AAKA;AA3HA;;AACA;AACA;AACA;AACA;;;AAJA;AA6HA;AACA;AAKA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzpCA;AAAA;AACA;AAUA;AACA;AACA;AACA;AAEA;AAOA;AACA;AACA;AAEA;AAQA;AAEA;AAcA;AACA;AAEA;;AAmBA;AACA;AACA;AACA;AAGA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAMA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAKA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAAA;;;;;;;AACA;;;;;;;AAAA;AAIA;AAAA;AAAA;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AAAA;;;;;;;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AAIA;AACA;AAGA;AACA;AAAA;AAAA;;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAgBA;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;;;;;;;;AAKA;AAlZA;;AAmBA;AACA;;;AApBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtDA","sources":["webpack://@coral-xyz/app-extension/../../node_modules/ethereum-multicall/dist/esm/multicall.js","webpack://@coral-xyz/app-extension/./src/components/Unlocked/Settings/index.tsx","webpack://@coral-xyz/app-extension/./src/components/common/Account/ImportAccounts.tsx","webpack://@coral-xyz/app-extension/webpack/runtime/getFullHash"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { BigNumber, ethers } from 'ethers';\nimport { defaultAbiCoder } from 'ethers/lib/utils';\nimport { ExecutionType, Networks } from './enums';\nimport { Utils } from './utils';\nvar Multicall = /** @class */ (function () {\n    function Multicall(_options) {\n        this._options = _options;\n        this.ABI = [\n            {\n                constant: false,\n                inputs: [\n                    {\n                        components: [\n                            { name: 'target', type: 'address' },\n                            { name: 'callData', type: 'bytes' },\n                        ],\n                        name: 'calls',\n                        type: 'tuple[]',\n                    },\n                ],\n                name: 'aggregate',\n                outputs: [\n                    { name: 'blockNumber', type: 'uint256' },\n                    { name: 'returnData', type: 'bytes[]' },\n                ],\n                payable: false,\n                stateMutability: 'nonpayable',\n                type: 'function',\n            },\n            {\n                inputs: [\n                    {\n                        internalType: 'bool',\n                        name: 'requireSuccess',\n                        type: 'bool',\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: 'address',\n                                name: 'target',\n                                type: 'address',\n                            },\n                            {\n                                internalType: 'bytes',\n                                name: 'callData',\n                                type: 'bytes',\n                            },\n                        ],\n                        internalType: 'struct Multicall2.Call[]',\n                        name: 'calls',\n                        type: 'tuple[]',\n                    },\n                ],\n                name: 'tryBlockAndAggregate',\n                outputs: [\n                    {\n                        internalType: 'uint256',\n                        name: 'blockNumber',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'bytes32',\n                        name: 'blockHash',\n                        type: 'bytes32',\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: 'bool',\n                                name: 'success',\n                                type: 'bool',\n                            },\n                            {\n                                internalType: 'bytes',\n                                name: 'returnData',\n                                type: 'bytes',\n                            },\n                        ],\n                        internalType: 'struct Multicall2.Result[]',\n                        name: 'returnData',\n                        type: 'tuple[]',\n                    },\n                ],\n                stateMutability: 'nonpayable',\n                type: 'function',\n            },\n        ];\n        if (this._options.web3Instance) {\n            this._executionType = ExecutionType.web3;\n            return;\n        }\n        if (this._options.ethersProvider) {\n            this._executionType = ExecutionType.ethers;\n            return;\n        }\n        if (this._options.nodeUrl) {\n            this._executionType = ExecutionType.customHttp;\n            return;\n        }\n        throw new Error(\n        // tslint:disable-next-line: max-line-length\n        'Your options passed in our incorrect they need to match either `MulticallOptionsEthers`, `MulticallOptionsWeb3` or `MulticallOptionsCustomJsonRpcProvider` interfaces');\n    }\n    /**\n     * Call all the contract calls in 1\n     * @param calls The calls\n     */\n    Multicall.prototype.call = function (contractCallContexts, contractCallOptions) {\n        if (contractCallOptions === void 0) { contractCallOptions = {}; }\n        return __awaiter(this, void 0, void 0, function () {\n            var aggregateResponse, returnObject, response, contractCallsResults, originalContractCallContext, returnObjectResult, method, methodContext, originalContractCallMethodContext, outputTypes, decodedReturnValues;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!Array.isArray(contractCallContexts)) {\n                            contractCallContexts = [contractCallContexts];\n                        }\n                        return [4 /*yield*/, this.execute(this.buildAggregateCallContext(contractCallContexts), contractCallOptions)];\n                    case 1:\n                        aggregateResponse = _a.sent();\n                        returnObject = {\n                            results: {},\n                            blockNumber: aggregateResponse.blockNumber,\n                        };\n                        for (response = 0; response < aggregateResponse.results.length; response++) {\n                            contractCallsResults = aggregateResponse.results[response];\n                            originalContractCallContext = contractCallContexts[contractCallsResults.contractContextIndex];\n                            returnObjectResult = {\n                                originalContractCallContext: Utils.deepClone(originalContractCallContext),\n                                callsReturnContext: [],\n                            };\n                            for (method = 0; method < contractCallsResults.methodResults.length; method++) {\n                                methodContext = contractCallsResults.methodResults[method];\n                                originalContractCallMethodContext = originalContractCallContext.calls[methodContext.contractMethodIndex];\n                                outputTypes = this.findOutputTypesFromAbi(originalContractCallContext.abi, originalContractCallMethodContext.methodName);\n                                if (this._options.tryAggregate && !methodContext.result.success) {\n                                    returnObjectResult.callsReturnContext.push(Utils.deepClone({\n                                        returnValues: [],\n                                        decoded: false,\n                                        reference: originalContractCallMethodContext.reference,\n                                        methodName: originalContractCallMethodContext.methodName,\n                                        methodParameters: originalContractCallMethodContext.methodParameters,\n                                        success: false,\n                                    }));\n                                    continue;\n                                }\n                                if (outputTypes && outputTypes.length > 0) {\n                                    try {\n                                        decodedReturnValues = defaultAbiCoder.decode(\n                                        // tslint:disable-next-line: no-any\n                                        outputTypes, this.getReturnDataFromResult(methodContext.result));\n                                        returnObjectResult.callsReturnContext.push(Utils.deepClone({\n                                            returnValues: this.formatReturnValues(decodedReturnValues),\n                                            decoded: true,\n                                            reference: originalContractCallMethodContext.reference,\n                                            methodName: originalContractCallMethodContext.methodName,\n                                            methodParameters: originalContractCallMethodContext.methodParameters,\n                                            success: true,\n                                        }));\n                                    }\n                                    catch (e) {\n                                        if (!this._options.tryAggregate) {\n                                            throw e;\n                                        }\n                                        returnObjectResult.callsReturnContext.push(Utils.deepClone({\n                                            returnValues: [],\n                                            decoded: false,\n                                            reference: originalContractCallMethodContext.reference,\n                                            methodName: originalContractCallMethodContext.methodName,\n                                            methodParameters: originalContractCallMethodContext.methodParameters,\n                                            success: false,\n                                        }));\n                                    }\n                                }\n                                else {\n                                    returnObjectResult.callsReturnContext.push(Utils.deepClone({\n                                        returnValues: this.getReturnDataFromResult(methodContext.result),\n                                        decoded: false,\n                                        reference: originalContractCallMethodContext.reference,\n                                        methodName: originalContractCallMethodContext.methodName,\n                                        methodParameters: originalContractCallMethodContext.methodParameters,\n                                        success: true,\n                                    }));\n                                }\n                            }\n                            returnObject.results[returnObjectResult.originalContractCallContext.reference] = returnObjectResult;\n                        }\n                        return [2 /*return*/, returnObject];\n                }\n            });\n        });\n    };\n    /**\n     * Get return data from result\n     * @param result The result\n     */\n    // tslint:disable-next-line: no-any\n    Multicall.prototype.getReturnDataFromResult = function (result) {\n        if (this._options.tryAggregate) {\n            return result.returnData;\n        }\n        return result;\n    };\n    /**\n     * Format return values so its always an array\n     * @param decodedReturnValues The decoded return values\n     */\n    // tslint:disable-next-line: no-any\n    Multicall.prototype.formatReturnValues = function (decodedReturnValues) {\n        var decodedReturnResults = decodedReturnValues;\n        if (decodedReturnValues.length === 1) {\n            decodedReturnResults = decodedReturnValues[0];\n        }\n        if (Array.isArray(decodedReturnResults)) {\n            return decodedReturnResults;\n        }\n        return [decodedReturnResults];\n    };\n    /**\n     * Build aggregate call context\n     * @param contractCallContexts The contract call contexts\n     */\n    Multicall.prototype.buildAggregateCallContext = function (contractCallContexts) {\n        var aggregateCallContext = [];\n        for (var contract = 0; contract < contractCallContexts.length; contract++) {\n            var contractContext = contractCallContexts[contract];\n            var executingInterface = new ethers.utils.Interface(JSON.stringify(contractContext.abi));\n            for (var method = 0; method < contractContext.calls.length; method++) {\n                // https://github.com/ethers-io/ethers.js/issues/211\n                var methodContext = contractContext.calls[method];\n                // tslint:disable-next-line: no-unused-expression\n                var encodedData = executingInterface.encodeFunctionData(methodContext.methodName, methodContext.methodParameters);\n                aggregateCallContext.push({\n                    contractContextIndex: Utils.deepClone(contract),\n                    contractMethodIndex: Utils.deepClone(method),\n                    target: contractContext.contractAddress,\n                    encodedData: encodedData,\n                });\n            }\n        }\n        return aggregateCallContext;\n    };\n    /**\n     * Find output types from abi\n     * @param abi The abi\n     * @param methodName The method name\n     */\n    Multicall.prototype.findOutputTypesFromAbi = function (abi, methodName) {\n        var _a;\n        var contract = new ethers.Contract(ethers.constants.AddressZero, abi);\n        methodName = methodName.trim();\n        if (contract.interface.functions[methodName]) {\n            return contract.interface.functions[methodName].outputs;\n        }\n        for (var i = 0; i < abi.length; i++) {\n            if (((_a = abi[i].name) === null || _a === void 0 ? void 0 : _a.trim()) === methodName) {\n                return abi[i].outputs;\n            }\n        }\n        return undefined;\n    };\n    /**\n     * Execute the multicall contract call\n     * @param calls The calls\n     */\n    Multicall.prototype.execute = function (calls, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _a = this._executionType;\n                        switch (_a) {\n                            case ExecutionType.web3: return [3 /*break*/, 1];\n                            case ExecutionType.ethers: return [3 /*break*/, 3];\n                            case ExecutionType.customHttp: return [3 /*break*/, 3];\n                        }\n                        return [3 /*break*/, 5];\n                    case 1: return [4 /*yield*/, this.executeWithWeb3(calls, options)];\n                    case 2: return [2 /*return*/, _b.sent()];\n                    case 3: return [4 /*yield*/, this.executeWithEthersOrCustom(calls, options)];\n                    case 4: return [2 /*return*/, _b.sent()];\n                    case 5: throw new Error(this._executionType + \" is not defined\");\n                }\n            });\n        });\n    };\n    /**\n     * Execute aggregate with web3 instance\n     * @param calls The calls context\n     */\n    Multicall.prototype.executeWithWeb3 = function (calls, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var web3, networkId, contract, callParams, contractResponse, contractResponse;\n            var _a, _b;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        web3 = this.getTypedOptions().web3Instance;\n                        return [4 /*yield*/, web3.eth.net.getId()];\n                    case 1:\n                        networkId = _c.sent();\n                        contract = new web3.eth.Contract(this.ABI, this.getContractBasedOnNetwork(networkId));\n                        callParams = [];\n                        if (options.blockNumber) {\n                            callParams.push(options.blockNumber);\n                        }\n                        if (!this._options.tryAggregate) return [3 /*break*/, 3];\n                        return [4 /*yield*/, (_a = contract.methods\n                                .tryBlockAndAggregate(false, this.mapCallContextToMatchContractFormat(calls)))\n                                .call.apply(_a, callParams)];\n                    case 2:\n                        contractResponse = (_c.sent());\n                        contractResponse.blockNumber = BigNumber.from(contractResponse.blockNumber);\n                        return [2 /*return*/, this.buildUpAggregateResponse(contractResponse, calls)];\n                    case 3: return [4 /*yield*/, (_b = contract.methods\n                            .aggregate(this.mapCallContextToMatchContractFormat(calls)))\n                            .call.apply(_b, callParams)];\n                    case 4:\n                        contractResponse = (_c.sent());\n                        contractResponse.blockNumber = BigNumber.from(contractResponse.blockNumber);\n                        return [2 /*return*/, this.buildUpAggregateResponse(contractResponse, calls)];\n                }\n            });\n        });\n    };\n    /**\n     * Execute with ethers using passed in provider context or custom one\n     * @param calls The calls\n     */\n    Multicall.prototype.executeWithEthersOrCustom = function (calls, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var ethersProvider, customProvider, network, contract, overrideOptions, contractResponse, contractResponse;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        ethersProvider = this.getTypedOptions()\n                            .ethersProvider;\n                        if (!ethersProvider) {\n                            customProvider = this.getTypedOptions();\n                            if (customProvider.nodeUrl) {\n                                ethersProvider = new ethers.providers.JsonRpcProvider(customProvider.nodeUrl);\n                            }\n                            else {\n                                ethersProvider = ethers.getDefaultProvider();\n                            }\n                        }\n                        return [4 /*yield*/, ethersProvider.getNetwork()];\n                    case 1:\n                        network = _a.sent();\n                        contract = new ethers.Contract(this.getContractBasedOnNetwork(network.chainId), this.ABI, ethersProvider);\n                        overrideOptions = {};\n                        if (options.blockNumber) {\n                            overrideOptions = __assign(__assign({}, overrideOptions), { blockTag: Number(options.blockNumber) });\n                        }\n                        if (!this._options.tryAggregate) return [3 /*break*/, 3];\n                        return [4 /*yield*/, contract.callStatic.tryBlockAndAggregate(false, this.mapCallContextToMatchContractFormat(calls), overrideOptions)];\n                    case 2:\n                        contractResponse = (_a.sent());\n                        return [2 /*return*/, this.buildUpAggregateResponse(contractResponse, calls)];\n                    case 3: return [4 /*yield*/, contract.callStatic.aggregate(this.mapCallContextToMatchContractFormat(calls), overrideOptions)];\n                    case 4:\n                        contractResponse = (_a.sent());\n                        return [2 /*return*/, this.buildUpAggregateResponse(contractResponse, calls)];\n                }\n            });\n        });\n    };\n    /**\n     * Build up the aggregated response from the contract response mapping\n     * metadata from the calls\n     * @param contractResponse The contract response\n     * @param calls The calls\n     */\n    Multicall.prototype.buildUpAggregateResponse = function (contractResponse, calls) {\n        var aggregateResponse = {\n            blockNumber: contractResponse.blockNumber.toNumber(),\n            results: [],\n        };\n        var _loop_1 = function (i) {\n            var existingResponse = aggregateResponse.results.find(function (c) { return c.contractContextIndex === calls[i].contractContextIndex; });\n            if (existingResponse) {\n                existingResponse.methodResults.push({\n                    result: contractResponse.returnData[i],\n                    contractMethodIndex: calls[i].contractMethodIndex,\n                });\n            }\n            else {\n                aggregateResponse.results.push({\n                    methodResults: [\n                        {\n                            result: contractResponse.returnData[i],\n                            contractMethodIndex: calls[i].contractMethodIndex,\n                        },\n                    ],\n                    contractContextIndex: calls[i].contractContextIndex,\n                });\n            }\n        };\n        for (var i = 0; i < contractResponse.returnData.length; i++) {\n            _loop_1(i);\n        }\n        return aggregateResponse;\n    };\n    /**\n     * Map call contract to match contract format\n     * @param calls The calls context\n     */\n    Multicall.prototype.mapCallContextToMatchContractFormat = function (calls) {\n        return calls.map(function (call) {\n            return {\n                target: call.target,\n                callData: call.encodedData,\n            };\n        });\n    };\n    /**\n     * Get typed options\n     */\n    Multicall.prototype.getTypedOptions = function () {\n        return this._options;\n    };\n    /**\n     * Get the contract based on the network\n     * @param tryAggregate The tryAggregate\n     * @param network The network\n     */\n    Multicall.prototype.getContractBasedOnNetwork = function (network) {\n        // if they have overriden the multicall custom contract address then use that\n        if (this._options.multicallCustomContractAddress) {\n            return this._options.multicallCustomContractAddress;\n        }\n        switch (network) {\n            case Networks.mainnet:\n            case Networks.kovan:\n            case Networks.rinkeby:\n            case Networks.ropsten:\n            case Networks.goerli:\n                return '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696';\n            case Networks.bsc:\n                return '0xC50F4c1E81c873B2204D7eFf7069Ffec6Fbe136D';\n            case Networks.bsc_testnet:\n                return '0x73CCde5acdb9980f54BcCc0483B28B8b4a537b4A';\n            case Networks.xdai:\n                return '0x2325b72990D81892E0e09cdE5C80DD221F147F8B';\n            case Networks.mumbai:\n                return '0xe9939e7Ea7D7fb619Ac57f648Da7B1D425832631';\n            case Networks.matic:\n                return '0x275617327c958bD06b5D6b871E7f491D76113dd8';\n            case Networks.etherlite:\n                return '0x21681750D7ddCB8d1240eD47338dC984f94AF2aC';\n            case Networks.arbitrum:\n                return '0x80C7DD17B01855a6D2347444a0FCC36136a314de';\n            case Networks.avalancheFuji:\n                return '0x3D015943d2780fE97FE3f69C97edA2CCC094f78c';\n            case Networks.avalancheMainnet:\n                return '0xed386Fe855C1EFf2f843B910923Dd8846E45C5A4';\n            case Networks.fantom:\n                return '0xD98e3dBE5950Ca8Ce5a4b59630a5652110403E5c';\n            case Networks.cronos:\n                return '0x5e954f5972EC6BFc7dECd75779F10d848230345F';\n            case Networks.harmony:\n                return '0x5c41f6817feeb65d7b2178b0b9cebfc8fad97969';\n            case Networks.optimism:\n                return '0xeAa6877139d436Dc6d1f75F3aF15B74662617B2C';\n            case Networks.kovanOptimism:\n                return '0x91c88479F21203444D2B20Aa001f951EC8CF2F68';\n            case Networks.aurora:\n                return '0x04364F8908BDCB4cc7EA881d0DE869398BA849C9';\n            default:\n                throw new Error(\"Network - \" + network + \" doesn't have a multicall contract address defined. Please check your network or deploy your own contract on it.\");\n        }\n    };\n    return Multicall;\n}());\nexport { Multicall };\n","import { Suspense, useEffect, useState } from \"react\";\nimport {\n  BACKPACK_FEATURE_POP_MODE,\n  BACKPACK_FEATURE_XNFT,\n  Blockchain,\n  DISCORD_INVITE_LINK,\n  MESSAGES_ENABLED,\n  NOTIFICATIONS_ENABLED,\n  openPopupWindow,\n  UI_RPC_METHOD_KEYRING_ACTIVE_WALLET_UPDATE,\n  UI_RPC_METHOD_KEYRING_IMPORT_SECRET_KEY,\n  UI_RPC_METHOD_KEYRING_STORE_LOCK,\n} from \"@coral-xyz/common\";\nimport type { WalletPublicKeys } from \"@coral-xyz/recoil\";\nimport {\n  useActiveWallets,\n  useBackgroundClient,\n  useBlockchainLogo,\n  useFeatureGates,\n  useWalletPublicKeys,\n} from \"@coral-xyz/recoil\";\nimport { HOVER_OPACITY, styles, useCustomTheme } from \"@coral-xyz/themes\";\nimport {\n  AccountCircleOutlined,\n  Add,\n  ExpandLess,\n  ExpandMore,\n  Lock,\n  Settings,\n  Tab as WindowIcon,\n} from \"@mui/icons-material\";\nimport { Box, IconButton, Typography } from \"@mui/material\";\nimport { Keypair } from \"@solana/web3.js\";\nimport * as bs58 from \"bs58\";\nimport { ethers } from \"ethers\";\n\nimport { useCustomAvatar } from \"../../hooks/useCustomAvatar\";\n\nimport {\n  Header,\n  LaunchDetail,\n  List,\n  ListItem,\n  PrimaryButton,\n  PushDetail,\n  SubtextParagraph,\n  WalletAddress,\n} from \"../../../components/common\";\nimport { ContactsIcon, DiscordIcon, GridIcon } from \"../../common/Icon\";\nimport { TextInput } from \"../../common/Inputs\";\nimport {\n  CloseButton,\n  useDrawerContext,\n  WithDrawer,\n  WithMiniDrawer,\n} from \"../../common/Layout/Drawer\";\nimport {\n  NavStackEphemeral,\n  NavStackScreen,\n  useNavStack,\n} from \"../../common/Layout/NavStack\";\nimport { Logout, ResetWarning } from \"../../Locked/Reset/ResetWarning\";\nimport { RecentActivityButton } from \"../../Unlocked/Balances/RecentActivity\";\nimport { NotificationButton } from \"../Balances/Notifications\";\nimport { Contacts } from \"../Messages/Contacts\";\n\nimport { PreferencesAutoLock } from \"./Preferences/AutoLock\";\nimport { PreferencesEthereum } from \"./Preferences/Ethereum\";\nimport { PreferencesEthereumConnection } from \"./Preferences/Ethereum/Connection\";\nimport { PreferenceEthereumCustomRpcUrl } from \"./Preferences/Ethereum/CustomRpcUrl\";\nimport { PreferencesSolana } from \"./Preferences/Solana\";\nimport { PreferencesSolanaCommitment } from \"./Preferences/Solana/Commitment\";\nimport { PreferencesSolanaConnection } from \"./Preferences/Solana/ConnectionSwitch\";\nimport { PreferenceSolanaCustomRpcUrl } from \"./Preferences/Solana/CustomRpcUrl\";\nimport { PreferencesSolanaExplorer } from \"./Preferences/Solana/Explorer\";\nimport { PreferencesTrustedSites } from \"./Preferences/TrustedSites\";\nimport { XnftDetail } from \"./Xnfts/Detail\";\nimport { ChangePassword } from \"./YourAccount/ChangePassword\";\nimport { EditWallets } from \"./YourAccount/EditWallets\";\nimport { RemoveWallet } from \"./YourAccount/EditWallets/RemoveWallet\";\nimport { RenameWallet } from \"./YourAccount/EditWallets/RenameWallet\";\nimport { WalletDetail } from \"./YourAccount/EditWallets/WalletDetail\";\nimport {\n  ShowPrivateKey,\n  ShowPrivateKeyWarning,\n} from \"./YourAccount/ShowPrivateKey\";\nimport {\n  ShowRecoveryPhrase,\n  ShowRecoveryPhraseWarning,\n} from \"./YourAccount/ShowRecoveryPhrase\";\nimport { AddConnectWalletMenu, ConfirmCreateWallet } from \"./AddConnectWallet\";\nimport { Preferences } from \"./Preferences\";\nimport { UserAccountsMenuButton } from \"./UsernamesMenu\";\nimport { XnftSettings } from \"./Xnfts\";\nimport { YourAccount } from \"./YourAccount\";\n\nconst useStyles = styles((theme) => ({\n  addConnectWalletLabel: {\n    color: theme.custom.colors.fontColor,\n  },\n  menuButtonContainer: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexDirection: \"column\",\n  },\n  menuButton: {\n    padding: \"2px\",\n    background: `${theme.custom.colors.avatarIconBackground} !important`,\n    \"&:hover\": {\n      background: `${theme.custom.colors.avatarIconBackground} !important`,\n      backgroundColor: `${theme.custom.colors.avatarIconBackground} !important`,\n      opacity: HOVER_OPACITY,\n    },\n  },\n  addConnectRoot: {\n    background: \"transparent !important\",\n    height: \"48px\",\n    \"&:hover\": {\n      color: `${theme.custom.colors.fontColor} !important`,\n      background: \"transparent !important\",\n    },\n  },\n  privateKeyTextFieldRoot: {\n    \"& .MuiOutlinedInput-root\": {\n      border: theme.custom.colors.borderFull,\n      \"& textarea\": {\n        border: \"none\",\n        borderRadius: 0,\n      },\n      \"&:hover fieldset\": {\n        border: `solid 2pt ${theme.custom.colors.primaryButton}`,\n      },\n      \"&.Mui-focused fieldset\": {\n        border: `solid 2pt ${theme.custom.colors.primaryButton} !important`,\n      },\n    },\n  },\n}));\n\nexport function SettingsButton() {\n  const featureGates = useFeatureGates();\n  return (\n    <div style={{ display: \"flex\" }}>\n      <RecentActivityButton />\n      {featureGates[NOTIFICATIONS_ENABLED] && <NotificationButton />}\n      <div style={{ width: \"16px\" }} />\n      <AvatarButton />\n    </div>\n  );\n}\n\nfunction AvatarButton() {\n  const classes = useStyles();\n  const [settingsOpen, setSettingsOpen] = useState(false);\n  const avatarUrl = useCustomAvatar(32);\n\n  return (\n    <div className={classes.menuButtonContainer}>\n      <IconButton\n        disableRipple\n        className={classes.menuButton}\n        onClick={() => setSettingsOpen(!settingsOpen)}\n        size=\"large\"\n        id=\"menu-button\"\n      >\n        <img\n          src={avatarUrl}\n          style={{\n            width: \"32px\",\n            height: \"32px\",\n            borderRadius: \"16px\",\n          }}\n        />\n      </IconButton>\n      <WithDrawer openDrawer={settingsOpen} setOpenDrawer={setSettingsOpen}>\n        <div style={{ height: \"100%\" }}>\n          <NavStackEphemeral\n            initialRoute={{ name: \"root\", title: \"Profile\" }}\n            options={() => ({ title: \"\" })}\n            navButtonLeft={\n              <CloseButton onClick={() => setSettingsOpen(false)} />\n            }\n          >\n            <NavStackScreen\n              name={\"root\"}\n              component={(props: any) => <SettingsMenu {...props} />}\n            />\n            <NavStackScreen\n              name={\"add-connect-wallet\"}\n              component={(props: any) => <AddConnectWalletMenu {...props} />}\n            />\n            <NavStackScreen\n              name={\"import-secret-key\"}\n              component={(props: any) => <ImportSecretKey {...props} />}\n            />\n            <NavStackScreen\n              name={\"your-account\"}\n              component={(props: any) => <YourAccount {...props} />}\n            />\n            <NavStackScreen\n              name={\"contacts-list\"}\n              component={(props: any) => <Contacts {...props} />}\n            />\n            <NavStackScreen\n              name={\"preferences\"}\n              component={(props: any) => <Preferences {...props} />}\n            />\n            <NavStackScreen\n              name={\"preferences-auto-lock\"}\n              component={(props: any) => <PreferencesAutoLock {...props} />}\n            />\n            <NavStackScreen\n              name={\"preferences-trusted-sites\"}\n              component={(props: any) => <PreferencesTrustedSites {...props} />}\n            />\n            <NavStackScreen\n              name={\"preferences-solana\"}\n              component={(props: any) => <PreferencesSolana {...props} />}\n            />\n            <NavStackScreen\n              name={\"preferences-ethereum\"}\n              component={(props: any) => <PreferencesEthereum {...props} />}\n            />\n            <NavStackScreen\n              name={\"preferences-solana-rpc-connection\"}\n              component={(props: any) => (\n                <PreferencesSolanaConnection {...props} />\n              )}\n            />\n            <NavStackScreen\n              name={\"preferences-solana-edit-rpc-connection\"}\n              component={(props: any) => (\n                <PreferenceSolanaCustomRpcUrl {...props} />\n              )}\n            />\n            <NavStackScreen\n              name={\"preferences-solana-commitment\"}\n              component={(props: any) => (\n                <PreferencesSolanaCommitment {...props} />\n              )}\n            />\n            <NavStackScreen\n              name={\"preferences-solana-explorer\"}\n              component={(props: any) => (\n                <PreferencesSolanaExplorer {...props} />\n              )}\n            />\n            <NavStackScreen\n              name={\"preferences-ethereum-rpc-connection\"}\n              component={(props: any) => (\n                <PreferencesEthereumConnection {...props} />\n              )}\n            />\n            <NavStackScreen\n              name={\"preferences-ethereum-edit-rpc-connection\"}\n              component={(props: any) => (\n                <PreferenceEthereumCustomRpcUrl {...props} />\n              )}\n            />\n            <NavStackScreen\n              name={\"change-password\"}\n              component={(props: any) => <ChangePassword {...props} />}\n            />\n            <NavStackScreen\n              name={\"edit-wallets\"}\n              component={(props: any) => <EditWallets {...props} />}\n            />\n            <NavStackScreen\n              name={\"edit-wallets-wallet-detail\"}\n              component={(props: any) => <WalletDetail {...props} />}\n            />\n            <NavStackScreen\n              name={\"edit-wallets-remove\"}\n              component={(props: any) => <RemoveWallet {...props} />}\n            />\n            <NavStackScreen\n              name={\"edit-wallets-rename\"}\n              component={(props: any) => <RenameWallet {...props} />}\n            />\n            <NavStackScreen\n              name={\"show-private-key-warning\"}\n              component={(props: any) => <ShowPrivateKeyWarning {...props} />}\n            />\n            <NavStackScreen\n              name={\"show-private-key\"}\n              component={(props: any) => <ShowPrivateKey {...props} />}\n            />\n            <NavStackScreen\n              name={\"show-secret-phrase-warning\"}\n              component={(props: any) => (\n                <ShowRecoveryPhraseWarning {...props} />\n              )}\n            />\n            <NavStackScreen\n              name={\"show-secret-phrase\"}\n              component={(props: any) => <ShowRecoveryPhrase {...props} />}\n            />\n            <NavStackScreen\n              name={\"reset-warning\"}\n              component={(props: any) => <ResetWarning {...props} />}\n            />\n            <NavStackScreen\n              name={\"logout\"}\n              component={(props: any) => <Logout {...props} />}\n            />\n            <NavStackScreen\n              name={\"xnfts\"}\n              component={(props: any) => <XnftSettings {...props} />}\n            />\n            <NavStackScreen\n              name={\"xnfts-detail\"}\n              component={(props: any) => <XnftDetail {...props} />}\n            />\n          </NavStackEphemeral>\n        </div>\n      </WithDrawer>\n    </div>\n  );\n}\n\nfunction SettingsMenu() {\n  const { setTitle } = useNavStack();\n\n  useEffect(() => {\n    setTitle(<UserAccountsMenuButton />);\n  }, [setTitle]);\n\n  return (\n    <Suspense fallback={<div></div>}>\n      <_SettingsContent />\n    </Suspense>\n  );\n}\n\nfunction _SettingsContent() {\n  const { close } = useDrawerContext();\n  return (\n    <div>\n      <AvatarHeader />\n      <WalletLists close={close} />\n      <SettingsList />\n    </div>\n  );\n}\n\nfunction AvatarHeader() {\n  const theme = useCustomTheme();\n  const avatarUrl = useCustomAvatar(64);\n  return (\n    <div style={{ marginTop: \"16px\", marginBottom: \"36px\" }}>\n      <div\n        style={{\n          background: theme.custom.colors.avatarIconBackground,\n          borderRadius: \"40px\",\n          padding: \"3px\",\n          width: \"70px\",\n          height: \"70px\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          display: \"block\",\n        }}\n      >\n        <img\n          src={avatarUrl}\n          style={{\n            width: \"64px\",\n            height: \"64px\",\n            borderRadius: \"32px\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            display: \"block\",\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\nfunction WalletLists({ close }: { close: () => void }) {\n  const blockchainKeyrings = useWalletPublicKeys();\n  return (\n    <>\n      {Object.entries(blockchainKeyrings).map(([blockchain, keyring]) => (\n        <WalletList\n          key={blockchain}\n          blockchain={blockchain as Blockchain}\n          keyring={keyring}\n          close={close}\n        />\n      ))}\n    </>\n  );\n}\n\nfunction WalletList({\n  blockchain,\n  keyring,\n  close,\n}: {\n  blockchain: Blockchain;\n  keyring: any;\n  close: () => void;\n}) {\n  const background = useBackgroundClient();\n  const activeWallets = useActiveWallets();\n  const theme = useCustomTheme();\n  const blockchainLogo = useBlockchainLogo(blockchain);\n  const [showAll, setShowAll] = useState(false);\n\n  const clickWallet = (publicKey: string) => {\n    background\n      .request({\n        method: UI_RPC_METHOD_KEYRING_ACTIVE_WALLET_UPDATE,\n        params: [publicKey, blockchain],\n      })\n      .then((_resp) => close())\n      .catch(console.error);\n  };\n\n  let activeWalletType: \"derived\" | \"hardware\";\n\n  const keys = keyring.hdPublicKeys\n    .map((k: any) => ({ ...k, type: \"derived\" }))\n    .concat(\n      keyring.importedPublicKeys.map((k: any) => ({\n        ...k,\n        type: \"imported\",\n      }))\n    )\n    .concat(\n      keyring.ledgerPublicKeys.map((k: any) => ({ ...k, type: \"hardware\" }))\n    )\n    // The drop down should show all wallet keys *except* the active one.\n    .filter(({ publicKey, type }: any) => {\n      const isActive = activeWallets\n        .map((p) => p.publicKey)\n        .includes(publicKey);\n      if (isActive) {\n        activeWalletType = type;\n      }\n      return !isActive;\n    });\n\n  const { name, publicKey } = activeWallets.filter(\n    (a) => a.blockchain === blockchain\n  )[0];\n\n  return (\n    <div\n      style={{\n        marginBottom: \"16px\",\n        marginLeft: \"16px\",\n        marginRight: \"16px\",\n      }}\n    >\n      <div\n        style={{\n          border: `${theme.custom.colors.borderFull}`,\n          borderRadius: \"10px\",\n        }}\n      >\n        <div\n          style={{\n            display: \"flex\",\n          }}\n        >\n          <ListItem\n            disableRipple\n            style={{\n              background: theme.custom.colors.nav,\n              borderTopLeftRadius: \"8px\",\n              borderTopRightRadius: \"8px\",\n              borderBottomLeftRadius:\n                showAll && keys.length > 0 ? \"0px\" : \"8px\",\n              borderBottomRightRadius:\n                showAll && keys.length > 0 ? \"0px\" : \"8px\",\n              height: \"48px\",\n              display: \"flex\",\n              paddingLeft: \"12px\",\n              paddingRight: \"12px\",\n              flex: 1,\n            }}\n            onClick={() => setShowAll((s) => !s)}\n          >\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                justifyContent: \"space-between\",\n                width: \"100%\",\n              }}\n            >\n              <div\n                style={{\n                  display: \"flex\",\n                }}\n              >\n                <div\n                  style={{\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    flexDirection: \"column\",\n                  }}\n                >\n                  <img\n                    src={blockchainLogo}\n                    style={{\n                      width: \"12px\",\n                      borderRadius: \"2px\",\n                    }}\n                  />\n                </div>\n                <div\n                  style={{\n                    marginLeft: \"8px\",\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    flexDirection: \"column\",\n                  }}\n                >\n                  <WalletAddress\n                    name={name}\n                    publicKey={publicKey}\n                    style={{\n                      fontWeight: 500,\n                      lineHeight: \"24px\",\n                      fontSize: \"16px\",\n                    }}\n                    nameStyle={{\n                      color: theme.custom.colors.fontColor,\n                      whiteSpace: \"nowrap\",\n                      overflow: \"hidden\",\n                      textOverflow: \"ellipsis\",\n                      maxWidth: \"75px\",\n                    }}\n                  />\n                </div>\n                <div\n                  style={{\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    flexDirection: \"column\",\n                    marginLeft: \"4px\",\n                  }}\n                >\n                  <ImportTypeBadge type={activeWalletType!} />\n                </div>\n              </div>\n              <div\n                style={{\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                  justifyContent: \"center\",\n                }}\n              >\n                {showAll ? (\n                  <ExpandLess\n                    style={{\n                      width: \"22px\",\n                      color: theme.custom.colors.icon,\n                    }}\n                  />\n                ) : (\n                  <ExpandMore\n                    style={{\n                      width: \"22px\",\n                      color: theme.custom.colors.icon,\n                    }}\n                  />\n                )}\n              </div>\n            </div>\n          </ListItem>\n        </div>\n        {showAll && (\n          <div style={{}}>\n            <List\n              style={{\n                borderRadius: 0,\n                marginLeft: 0,\n                marginRight: 0,\n              }}\n            >\n              {keys.map(\n                (\n                  {\n                    name,\n                    publicKey,\n                    type,\n                  }: { name: string; publicKey: string; type: string },\n                  idx: number\n                ) => {\n                  return (\n                    <ListItem\n                      key={publicKey.toString()}\n                      onClick={() => clickWallet(publicKey)}\n                      isFirst={false}\n                      isLast={idx === keys.length - 1}\n                      style={{\n                        paddingTop: \"16px\",\n                        paddingBottom: \"16px\",\n                        paddingLeft: \"12px\",\n                        paddingRight: \"12px\",\n                        height: \"48px\",\n                      }}\n                    >\n                      <div\n                        style={{\n                          display: \"flex\",\n                          justifyContent: \"space-between\",\n                          width: \"100%\",\n                          marginLeft: \"20px\",\n                        }}\n                      >\n                        <div\n                          style={{\n                            display: \"flex\",\n                          }}\n                        >\n                          <div\n                            style={{\n                              display: \"flex\",\n                              justifyContent: \"center\",\n                              flexDirection: \"column\",\n                              marginRight: \"4px\",\n                            }}\n                          >\n                            <WalletAddress\n                              name={name}\n                              publicKey={publicKey}\n                              style={{\n                                fontWeight: 500,\n                                lineHeight: \"24px\",\n                                fontSize: \"16px\",\n                              }}\n                              nameStyle={{\n                                whiteSpace: \"nowrap\",\n                                overflow: \"hidden\",\n                                textOverflow: \"ellipsis\",\n                                maxWidth: \"75px\",\n                              }}\n                            />\n                          </div>\n                          <div\n                            style={{\n                              display: \"flex\",\n                              justifyContent: \"center\",\n                              flexDirection: \"column\",\n                            }}\n                          >\n                            <ImportTypeBadge type={type} />\n                          </div>\n                        </div>\n                      </div>\n                    </ListItem>\n                  );\n                }\n              )}\n            </List>\n          </div>\n        )}\n      </div>\n      {showAll && <AddConnectWalletButton blockchain={blockchain} />}\n    </div>\n  );\n}\n\nexport function ImportTypeBadge({ type }: { type: string }) {\n  const theme = useCustomTheme();\n  return type === \"derived\" ? (\n    <></>\n  ) : (\n    <div\n      style={{\n        paddingLeft: \"10px\",\n        paddingRight: \"10px\",\n        paddingTop: \"2px\",\n        paddingBottom: \"2px\",\n        backgroundColor: theme.custom.colors.bg2,\n        height: \"20px\",\n        borderRadius: \"10px\",\n      }}\n    >\n      <Typography\n        style={{\n          color: theme.custom.colors.fontColor,\n          fontSize: \"12px\",\n          lineHeight: \"16px\",\n          fontWeight: 600,\n        }}\n      >\n        {type === \"imported\" ? \"IMPORTED\" : \"HARDWARE\"}\n      </Typography>\n    </div>\n  );\n}\n\nexport const AddConnectWalletButton = ({\n  blockchain,\n}: {\n  blockchain: Blockchain;\n}) => {\n  const nav = useNavStack();\n  const classes = useStyles();\n  const theme = useCustomTheme();\n  return (\n    <List\n      style={{\n        background: \"transparent\",\n        color: theme.custom.colors.secondary,\n        marginLeft: 0,\n        marginRight: 0,\n        height: \"48px\",\n      }}\n    >\n      <ListItem\n        isFirst={false}\n        isLast={true}\n        onClick={() => nav.push(\"add-connect-wallet\", { blockchain })}\n        classes={{ root: classes.addConnectRoot }}\n      >\n        <div\n          style={{\n            border: `solid ${theme.custom.colors.nav}`,\n            borderRadius: \"40px\",\n            width: \"30px\",\n            height: \"30px\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            flexDirection: \"column\",\n            marginRight: \"12px\",\n          }}\n        >\n          <Add\n            style={{\n              color: \"inherit\",\n              display: \"block\",\n              marginLeft: \"auto\",\n              marginRight: \"auto\",\n              fontSize: \"14px\",\n            }}\n          />\n        </div>\n        <Typography\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            flexDirection: \"column\",\n          }}\n        >\n          Add / Connect Wallet\n        </Typography>\n      </ListItem>\n    </List>\n  );\n};\n\nfunction SettingsList() {\n  const theme = useCustomTheme();\n  const nav = useNavStack();\n  const background = useBackgroundClient();\n  const featureGates = useFeatureGates();\n\n  const lockWallet = () => {\n    background\n      .request({\n        method: UI_RPC_METHOD_KEYRING_STORE_LOCK,\n        params: [],\n      })\n      .catch(console.error);\n  };\n\n  const settingsMenu = [\n    {\n      label: \"Your Account\",\n      onClick: () => nav.push(\"your-account\"),\n      icon: (props: any) => <AccountCircleOutlined {...props} />,\n      detailIcon: <PushDetail />,\n    },\n    {\n      label: \"Preferences\",\n      onClick: () => nav.push(\"preferences\"),\n      icon: (props: any) => <Settings {...props} />,\n      detailIcon: <PushDetail />,\n    },\n  ];\n  if (BACKPACK_FEATURE_XNFT) {\n    // Removed xNFTs menu item to prevent access to xNFT component\n    // settingsMenu.push({\n    //   label: \"xNFTs\",\n    //   onClick: () => nav.push(\"xnfts\"),\n    //   icon: (props: any) => (\n    //     <div\n    //       style={{\n    //         display: \"flex\",\n    //         justifyContent: \"center\",\n    //         flexDirection: \"column\",\n    //       }}\n    //     >\n    //       <GridIcon\n    //         {...props}\n    //         style={{ ...props.style, width: \"24px\", height: \"20px\" }}\n    //       />\n    //     </div>\n    //   ),\n    //   detailIcon: <PushDetail />,\n    // });\n  }\n  if (BACKPACK_FEATURE_POP_MODE) {\n    settingsMenu.push({\n      label: \"Pop Window\",\n      onClick: () => {\n        openPopupWindow(\"popup.html\");\n        window.close();\n      },\n      icon: (props: any) => <WindowIcon {...props} />,\n      detailIcon: <LaunchDetail />,\n    });\n  }\n  settingsMenu.push({\n    label: \"Lock Wallet\",\n    onClick: () => lockWallet(),\n    icon: (props: any) => <Lock {...props} />,\n    detailIcon: <></>,\n  });\n\n  const supportList = [\n    {\n      label: \"Support\",\n      onClick: () => window.open(\"https://t.me/bananachainonsol\", \"_blank\"),\n      icon: (props: any) => <ContactsIcon {...props} />,\n      detailIcon: <LaunchDetail />,\n    },\n  ];\n\n  const contactList = [\n    {\n      label: \"Contacts\",\n      onClick: () => nav.push(\"contacts-list\"),\n      icon: (props: any) => <ContactsIcon {...props} />,\n      detailIcon: <PushDetail />,\n    },\n  ];\n\n  return (\n    <>\n      <List\n        style={{\n          marginTop: \"24px\",\n          marginBottom: \"16px\",\n          border: `${theme.custom.colors.borderFull}`,\n          borderRadius: \"10px\",\n        }}\n      >\n        {settingsMenu.map((s, idx) => {\n          return (\n            <ListItem\n              key={s.label}\n              isFirst={idx === 0}\n              isLast={idx === settingsMenu.length - 1}\n              onClick={s.onClick}\n              id={s.label}\n              style={{\n                height: \"44px\",\n                padding: \"12px\",\n              }}\n              detail={s.detailIcon}\n            >\n              <div\n                style={{\n                  display: \"flex\",\n                  flex: 1,\n                }}\n              >\n                {s.icon({\n                  style: {\n                    color: theme.custom.colors.icon,\n                    marginRight: \"8px\",\n                    height: \"24px\",\n                    width: \"24px\",\n                  },\n                  fill: theme.custom.colors.icon,\n                })}\n                <Typography\n                  style={{\n                    fontWeight: 500,\n                    fontSize: \"16px\",\n                    lineHeight: \"24px\",\n                  }}\n                >\n                  {s.label}\n                </Typography>\n              </div>\n            </ListItem>\n          );\n        })}\n      </List>\n\n      {featureGates[MESSAGES_ENABLED] && (\n        <List\n          style={{\n            marginTop: \"24px\",\n            marginBottom: \"16px\",\n            border: `${theme.custom.colors.borderFull}`,\n            borderRadius: \"10px\",\n          }}\n        >\n          {contactList.map((s, idx) => {\n            return (\n              <ListItem\n                key={s.label}\n                isFirst={idx === 0}\n                isLast={idx === contactList.length - 1}\n                onClick={s.onClick}\n                id={s.label}\n                style={{\n                  height: \"44px\",\n                  padding: \"12px\",\n                }}\n                detail={s.detailIcon}\n              >\n                <div\n                  style={{\n                    display: \"flex\",\n                    flex: 1,\n                  }}\n                >\n                  {s.icon({\n                    style: {\n                      color: theme.custom.colors.icon,\n                      height: \"24px\",\n                      width: \"24px\",\n                    },\n                    fill: theme.custom.colors.icon,\n                  })}\n                  <Typography\n                    style={{\n                      marginLeft: \"8px\",\n                      fontWeight: 500,\n                      fontSize: \"16px\",\n                      lineHeight: \"24px\",\n                    }}\n                  >\n                    {s.label}\n                  </Typography>\n                </div>\n              </ListItem>\n            );\n          })}\n        </List>\n      )}\n\n      <List\n        style={{\n          marginTop: \"24px\",\n          marginBottom: \"16px\",\n          border: `${theme.custom.colors.borderFull}`,\n          borderRadius: \"10px\",\n        }}\n      >\n        {supportList.map((s, idx) => {\n          return (\n            <ListItem\n              key={s.label}\n              isFirst={idx === 0}\n              isLast={idx === supportList.length - 1}\n              onClick={s.onClick}\n              id={s.label}\n              style={{\n                height: \"44px\",\n                padding: \"12px\",\n              }}\n              detail={s.detailIcon}\n            >\n              <div\n                style={{\n                  display: \"flex\",\n                  flex: 1,\n                }}\n              >\n                {s.icon({\n                  style: {\n                    color: theme.custom.colors.icon,\n                    height: \"24px\",\n                    width: \"24px\",\n                  },\n                  fill: theme.custom.colors.icon,\n                })}\n                <Typography\n                  style={{\n                    marginLeft: \"8px\",\n                    fontWeight: 500,\n                    fontSize: \"16px\",\n                    lineHeight: \"24px\",\n                  }}\n                >\n                  {s.label}\n                </Typography>\n              </div>\n            </ListItem>\n          );\n        })}\n      </List>\n    </>\n  );\n}\n\nexport function ImportSecretKey({ blockchain }: { blockchain: Blockchain }) {\n  const background = useBackgroundClient();\n  const existingPublicKeys = useWalletPublicKeys();\n  const nav = useNavStack();\n  const theme = useCustomTheme();\n  const [name, setName] = useState(\"\");\n  const [secretKey, setSecretKey] = useState(\"\");\n  const [error, setError] = useState<string | null>(null);\n  const [openDrawer, setOpenDrawer] = useState(false);\n  const [newPublicKey, setNewPublicKey] = useState(\"\");\n\n  useEffect(() => {\n    const prevTitle = nav.title;\n    nav.setTitle(\"\");\n    return () => {\n      nav.setTitle(prevTitle);\n    };\n  }, [theme]);\n\n  useEffect(() => {\n    // Clear error on form input changes\n    setError(null);\n  }, [name, secretKey]);\n\n  const save = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    let secretKeyHex;\n    try {\n      secretKeyHex = validateSecretKey(\n        blockchain,\n        secretKey,\n        existingPublicKeys\n      );\n    } catch (e) {\n      setError((e as Error).message);\n      return;\n    }\n\n    const publicKey = await background.request({\n      method: UI_RPC_METHOD_KEYRING_IMPORT_SECRET_KEY,\n      params: [blockchain, secretKeyHex, name],\n    });\n\n    await background.request({\n      method: UI_RPC_METHOD_KEYRING_ACTIVE_WALLET_UPDATE,\n      params: [publicKey, blockchain],\n    });\n\n    setNewPublicKey(publicKey);\n    setOpenDrawer(true);\n  };\n\n  return (\n    <>\n      <form\n        onSubmit={save}\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          height: \"100%\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <Box sx={{ margin: \"24px 0\" }}>\n          <Box sx={{ margin: \"0 24px\" }}>\n            <Header text=\"Import private key\" />\n            <SubtextParagraph style={{ marginBottom: \"32px\" }}>\n              Enter your private key. It will be encrypted and stored on your\n              device.\n            </SubtextParagraph>\n          </Box>\n          <Box sx={{ margin: \"0 16px\" }}>\n            <Box sx={{ marginBottom: \"4px\" }}>\n              <TextInput\n                autoFocus={true}\n                placeholder=\"Name\"\n                value={name}\n                setValue={(e) => setName(e.target.value)}\n              />\n            </Box>\n            <TextInput\n              placeholder=\"Enter private key\"\n              value={secretKey}\n              setValue={(e) => {\n                setSecretKey(e.target.value);\n              }}\n              onKeyDown={(e) => {\n                if (e.key === \"Enter\") {\n                  save(e);\n                }\n              }}\n              rows={4}\n              error={error ? true : false}\n              errorMessage={error || \"\"}\n            />\n          </Box>\n        </Box>\n        <Box\n          sx={{\n            marginLeft: \"16px\",\n            marginRight: \"16px\",\n            marginBottom: \"16px\",\n            display: \"flex\",\n            justifyContent: \"space-between\",\n          }}\n        >\n          <PrimaryButton\n            type=\"submit\"\n            label=\"Import\"\n            disabled={secretKey.length === 0}\n          />\n        </Box>\n      </form>\n      <WithMiniDrawer openDrawer={openDrawer} setOpenDrawer={setOpenDrawer}>\n        <ConfirmCreateWallet\n          blockchain={blockchain}\n          publicKey={newPublicKey}\n          setOpenDrawer={setOpenDrawer}\n        />\n      </WithMiniDrawer>\n    </>\n  );\n}\n\n// Validate a secret key and return a normalised hex representation\nfunction validateSecretKey(\n  blockchain: Blockchain,\n  secretKey: string,\n  keyring: WalletPublicKeys\n): string {\n  // Extract public keys from keychain object into array of strings\n  const existingPublicKeys = Object.values(keyring[blockchain])\n    .map((k) => k.map((i) => i.publicKey))\n    .flat();\n\n  if (blockchain === Blockchain.SOLANA) {\n    let keypair: Keypair | null = null;\n    try {\n      // Attempt to create a keypair from JSON secret key\n      keypair = Keypair.fromSecretKey(new Uint8Array(JSON.parse(secretKey)));\n    } catch (_) {\n      try {\n        // Attempt to create a keypair from bs58 decode of secret key\n        keypair = Keypair.fromSecretKey(new Uint8Array(bs58.decode(secretKey)));\n      } catch (_) {\n        // Failure\n        throw new Error(\"Invalid private key\");\n      }\n    }\n\n    if (existingPublicKeys.includes(keypair.publicKey.toString())) {\n      throw new Error(\"Key already exists\");\n    }\n\n    return Buffer.from(keypair.secretKey).toString(\"hex\");\n  } else if (blockchain === Blockchain.ETHEREUM) {\n    try {\n      const wallet = new ethers.Wallet(secretKey);\n\n      if (existingPublicKeys.includes(wallet.publicKey)) {\n        throw new Error(\"Key already exists\");\n      }\n\n      return wallet.privateKey;\n    } catch (_) {\n      throw new Error(\"Invalid private key\");\n    }\n  }\n  throw new Error(\"secret key validation not implemented for blockchain\");\n}\n","import { useEffect, useState } from \"react\";\nimport {\n  accountDerivationPath,\n  Blockchain,\n  DEFAULT_SOLANA_CLUSTER,\n  DerivationPath,\n  derivationPathPrefix,\n  EthereumConnectionUrl,\n  UI_RPC_METHOD_KEYRING_STORE_READ_ALL_PUBKEYS,\n  UI_RPC_METHOD_PREVIEW_PUBKEYS,\n} from \"@coral-xyz/common\";\nimport { useBackgroundClient } from \"@coral-xyz/recoil\";\nimport { useCustomTheme } from \"@coral-xyz/themes\";\nimport Ethereum from \"@ledgerhq/hw-app-eth\";\nimport Solana from \"@ledgerhq/hw-app-solana\";\nimport type Transport from \"@ledgerhq/hw-transport\";\nimport {\n  Box,\n  List,\n  ListItemButton,\n  ListItemText,\n  MenuItem,\n} from \"@mui/material\";\nimport * as anchor from \"@project-serum/anchor\";\nimport { Connection as SolanaConnection, PublicKey } from \"@solana/web3.js\";\nimport { BigNumber, ethers } from \"ethers\";\n\nimport {\n  Checkbox,\n  Header,\n  Loading,\n  PrimaryButton,\n  SubtextParagraph,\n  walletAddressDisplay,\n} from \"../../common\";\nimport { TextInput } from \"../Inputs\";\n\nconst { base58: bs58 } = ethers.utils;\n\ntype Account = {\n  publicKey: string;\n  balance: BigNumber;\n  // The account index for the derivation path\n  index: number;\n};\n\nexport type SelectedAccount = {\n  index: number;\n  publicKey: string;\n};\n\nconst LOAD_PUBKEY_AMOUNT = 20;\nconst DISPLAY_PUBKEY_AMOUNT = 5;\n\nexport function ImportAccounts({\n  blockchain,\n  mnemonic,\n  transport,\n  onNext,\n  onError,\n  allowMultiple = true,\n}: {\n  blockchain: Blockchain;\n  mnemonic?: string;\n  transport?: Transport | null;\n  onNext: (\n    selectedAccounts: SelectedAccount[],\n    derivationPath: DerivationPath,\n    mnemonic?: string\n  ) => void;\n  onError?: (error: Error) => void;\n  allowMultiple?: boolean;\n}) {\n  const background = useBackgroundClient();\n  const theme = useCustomTheme();\n  const [accounts, setAccounts] = useState<Array<Account>>([]);\n  const [selectedAccounts, setSelectedAccounts] = useState<SelectedAccount[]>(\n    []\n  );\n  const [ledgerLocked, setLedgerLocked] = useState(false);\n  const [importedPubkeys, setImportedPubkeys] = useState<string[]>([]);\n  const [derivationPath, setDerivationPath] = useState<DerivationPath>(\n    DerivationPath.Default\n  );\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const blockchainKeyrings = await background.request({\n          method: UI_RPC_METHOD_KEYRING_STORE_READ_ALL_PUBKEYS,\n          params: [],\n        });\n        const keyring = blockchainKeyrings[blockchain];\n        setImportedPubkeys(\n          Object.values(keyring)\n            .flat()\n            .map((a: any) => a.publicKey)\n        );\n      } catch {\n        // Keyring store locked, either onboarding or left open\n      }\n    })();\n  }, [background, blockchain]);\n\n  //\n  // Load a list of accounts and their associated balances\n  //\n  useEffect(() => {\n    if (!derivationPath) return;\n\n    let loaderFn;\n    if (mnemonic) {\n      // Loading accounts from a mnemonic\n      loaderFn = (derivationPath: DerivationPath) =>\n        loadMnemonicPublicKeys(mnemonic, derivationPath);\n    } else if (transport) {\n      // Loading accounts from a Ledger\n      loaderFn = (derivationPath: DerivationPath) =>\n        loadLedgerPublicKeys(transport, derivationPath);\n    } else {\n      return;\n    }\n\n    loaderFn(derivationPath)\n      .then(async (publicKeys: string[]) => {\n        const balances = await loadBalances(publicKeys);\n        setAccounts(\n          balances.sort((a, b) =>\n            b.balance.lt(a.balance) ? -1 : b.balance.eq(a.balance) ? 0 : 1\n          )\n        );\n      })\n      .catch((error) => {\n        // Probably Ledger error, i.e. app is not opened\n        console.error(error);\n        if (onError) {\n          // Call custom error handler if one was passed\n          onError(error);\n        } else {\n          throw error;\n        }\n      });\n  }, [mnemonic, transport, derivationPath]);\n\n  //\n  // Clear accounts and selected acounts on change of derivation path.\n  //\n  useEffect(() => {\n    setAccounts([]);\n    setSelectedAccounts([]);\n  }, [derivationPath]);\n\n  //\n  // Load balances for accounts that have been loaded\n  //\n  const loadBalances = async (publicKeys: string[]) => {\n    if (blockchain === Blockchain.SOLANA) {\n      // TODO use Backpack configured value\n      const solanaMainnetRpc =\n        process.env.DEFAULT_SOLANA_CONNECTION_URL || DEFAULT_SOLANA_CLUSTER;\n      const solanaConnection = new SolanaConnection(\n        solanaMainnetRpc,\n        \"confirmed\"\n      );\n      const accounts = (\n        await anchor.utils.rpc.getMultipleAccounts(\n          solanaConnection,\n          publicKeys.map((p) => new PublicKey(p))\n        )\n      ).map((result, index) => {\n        return {\n          publicKey: publicKeys[index],\n          balance: result\n            ? BigNumber.from(result.account.lamports)\n            : BigNumber.from(0),\n          index,\n        };\n      });\n      return accounts;\n    } else if (blockchain === Blockchain.ETHEREUM) {\n      // TODO use Backpack configured value\n      const ethereumMainnetRpc =\n        process.env.DEFAULT_ETHEREUM_CONNECTION_URL ||\n        EthereumConnectionUrl.MAINNET;\n      const ethereumProvider = new ethers.providers.JsonRpcProvider(\n        ethereumMainnetRpc\n      );\n      const balances = await Promise.all(\n        publicKeys.map((p) => ethereumProvider.getBalance(p))\n      );\n      return publicKeys.map((p, index) => {\n        return { publicKey: p, balance: balances[index], index };\n      });\n    } else {\n      throw new Error(\"invalid blockchain\");\n    }\n  };\n\n  //\n  // Load accounts for the given mnemonic. This is passed to the ImportAccounts\n  // component and called whenever the derivation path is changed with the selector.\n  //\n  const loadMnemonicPublicKeys = async (\n    mnemonic: string,\n    derivationPath: DerivationPath\n  ) => {\n    return await background.request({\n      method: UI_RPC_METHOD_PREVIEW_PUBKEYS,\n      params: [blockchain, mnemonic, derivationPath, LOAD_PUBKEY_AMOUNT],\n    });\n  };\n\n  //\n  // Load accounts for a ledger.\n  //\n  const loadLedgerPublicKeys = async (\n    transport: Transport,\n    derivationPath: DerivationPath\n  ): Promise<string[]> => {\n    const publicKeys = [];\n    setLedgerLocked(true);\n\n    const ledger = {\n      [Blockchain.SOLANA]: new Solana(transport),\n      [Blockchain.ETHEREUM]: new Ethereum(transport),\n    }[blockchain];\n\n    // Add remaining accounts\n    for (let account = 0; account < LOAD_PUBKEY_AMOUNT; account += 1) {\n      const path = accountDerivationPath(blockchain, derivationPath, account);\n      publicKeys.push((await ledger.getAddress(path)).address);\n    }\n\n    setLedgerLocked(false);\n    return publicKeys.map((p) =>\n      blockchain === Blockchain.SOLANA ? bs58.encode(p) : p.toString()\n    );\n  };\n\n  //\n  // Handles checkbox clicks to select accounts to import.\n  //\n  const handleSelect = (index: number, publicKey: string) => () => {\n    const currentIndex = selectedAccounts.findIndex((a) => a.index === index);\n    let newSelectedAccounts = [...selectedAccounts];\n    if (currentIndex === -1) {\n      // Adding the account\n      if (allowMultiple) {\n        newSelectedAccounts.push({ index, publicKey });\n      } else {\n        newSelectedAccounts = [{ index, publicKey }];\n      }\n    } else {\n      // Removing the account\n      newSelectedAccounts.splice(currentIndex, 1);\n    }\n    // Sort by account indices\n    newSelectedAccounts.sort((a, b) => a.index - b.index);\n    setSelectedAccounts(newSelectedAccounts);\n  };\n\n  const derivationPathOptions = {\n    [Blockchain.SOLANA]: [\n      {\n        path: DerivationPath.Bip44,\n        label: derivationPathPrefix(Blockchain.SOLANA, DerivationPath.Bip44),\n      },\n      {\n        path: DerivationPath.Bip44Change,\n        label: derivationPathPrefix(\n          Blockchain.SOLANA,\n          DerivationPath.Bip44Change\n        ),\n      },\n    ]\n      // Note: We only allow importing the deprecated sollet derivation path for\n      //       hot wallets. This UI is hidden behind a local storage flag we\n      //       expect people to manually set, since this derivation path was only\n      //       used by mostly technical early Solana users.\n      .concat(\n        mnemonic && window.localStorage.getItem(\"sollet\")\n          ? [\n              {\n                path: DerivationPath.SolletDeprecated,\n                label:\n                  derivationPathPrefix(\n                    Blockchain.SOLANA,\n                    DerivationPath.SolletDeprecated\n                  ) + \" (deprecated)\",\n              },\n            ]\n          : []\n      ),\n    [Blockchain.ETHEREUM]: [\n      {\n        path: DerivationPath.Bip44,\n        label: derivationPathPrefix(Blockchain.ETHEREUM, DerivationPath.Bip44),\n      },\n      {\n        path: DerivationPath.Bip44Change,\n        label: derivationPathPrefix(\n          Blockchain.ETHEREUM,\n          DerivationPath.Bip44Change\n        ),\n      },\n    ],\n  }[blockchain];\n\n  // Symbol for balance displays\n  const symbol = {\n    [Blockchain.SOLANA]: \"BANANA\",\n    [Blockchain.ETHEREUM]: \"ETH\",\n  }[blockchain];\n\n  // Decimals for balance displays\n  const decimals = {\n    [Blockchain.SOLANA]: 9,\n    [Blockchain.ETHEREUM]: 18,\n  }[blockchain];\n\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        height: \"100%\",\n        justifyContent: \"space-between\",\n      }}\n    >\n      <Box>\n        <Box\n          sx={{\n            marginLeft: \"24px\",\n            marginRight: \"24px\",\n            marginTop: \"24px\",\n          }}\n        >\n          <Header text={`Import account${allowMultiple ? \"s\" : \"\"}`} />\n          <SubtextParagraph>\n            Select which account{allowMultiple ? \"s\" : \"\"} you'd like to import.\n          </SubtextParagraph>\n        </Box>\n        <div style={{ margin: \"16px\" }}>\n          <TextInput\n            placeholder=\"Derivation Path\"\n            value={derivationPath}\n            setValue={(e) => setDerivationPath(e.target.value)}\n            select={true}\n            disabled={ledgerLocked}\n          >\n            {derivationPathOptions.map((o, idx) => (\n              <MenuItem value={o.path} key={idx}>\n                {o.label}\n              </MenuItem>\n            ))}\n          </TextInput>\n        </div>\n        {accounts.length > 0 && (\n          <>\n            <List\n              sx={{\n                color: theme.custom.colors.fontColor,\n                background: theme.custom.colors.background,\n                borderRadius: \"12px\",\n                marginLeft: \"16px\",\n                marginRight: \"16px\",\n                paddingTop: \"8px\",\n                paddingBottom: \"8px\",\n              }}\n            >\n              {accounts\n                .slice(0, DISPLAY_PUBKEY_AMOUNT)\n                .map(({ publicKey, balance, index }) => (\n                  <ListItemButton\n                    key={publicKey.toString()}\n                    onClick={handleSelect(index, publicKey)}\n                    sx={{\n                      display: \"flex\",\n                      paddinLeft: \"16px\",\n                      paddingRight: \"16px\",\n                      paddingTop: \"5px\",\n                      paddingBottom: \"5px\",\n                    }}\n                    disableRipple\n                    disabled={importedPubkeys.includes(publicKey.toString())}\n                  >\n                    <Box style={{ display: \"flex\", width: \"100%\" }}>\n                      <div\n                        style={{\n                          display: \"flex\",\n                          justifyContent: \"center\",\n                          flexDirection: \"column\",\n                        }}\n                      >\n                        <Checkbox\n                          edge=\"start\"\n                          checked={\n                            selectedAccounts.some((a) => a.index === index) ||\n                            importedPubkeys.includes(publicKey.toString())\n                          }\n                          tabIndex={-1}\n                          disabled={importedPubkeys.includes(\n                            publicKey.toString()\n                          )}\n                          disableRipple\n                          style={{ marginLeft: 0 }}\n                        />\n                      </div>\n                      <ListItemText\n                        id={publicKey.toString()}\n                        primary={walletAddressDisplay(publicKey)}\n                        sx={{\n                          marginLeft: \"8px\",\n                          fontSize: \"14px\",\n                          lineHeight: \"32px\",\n                          fontWeight: 500,\n                        }}\n                      />\n                      <ListItemText\n                        sx={{\n                          color: theme.custom.colors.secondary,\n                          textAlign: \"right\",\n                        }}\n                        primary={`${\n                          balance\n                            ? (+ethers.utils.formatUnits(\n                                balance,\n                                decimals\n                              )).toFixed(4)\n                            : 0\n                        } ${symbol}`}\n                      />\n                    </Box>\n                  </ListItemButton>\n                ))}\n            </List>\n          </>\n        )}\n      </Box>\n      {accounts.length === 0 && <Loading />}\n      <Box\n        sx={{\n          mt: \"12px\",\n          ml: \"16px\",\n          mr: \"16px\",\n          mb: \"16px\",\n        }}\n      >\n        <PrimaryButton\n          label={`Import Account${allowMultiple ? \"s\" : \"\"}`}\n          onClick={() => onNext(selectedAccounts, derivationPath, mnemonic)}\n          disabled={selectedAccounts.length === 0}\n        />\n      </Box>\n    </Box>\n  );\n}\n","__webpack_require__.h = function() { return \"5b5194df79a97f340650\"; }"],"names":[],"sourceRoot":""}