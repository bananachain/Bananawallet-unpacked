{"version":3,"file":"options.4eaa43da4bd191f58793.hot-update.js","mappingsgBA;AACA;AACA;AAIA;AACA;AAEA;AAEA;;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAEA;AACA;AACA;AACA;;;;;;;;AAMA;AApEA;;AAOA;AACA;AACA;;;AATA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AAAA;AACA;AAUA;AACA;AACA;AACA;AAEA;AAOA;AACA;AACA;AAEA;AAQA;AAEA;AAcA;AACA;AAEA;;AAmBA;AACA;AACA;AACA;AAGA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAMA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAKA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAAA;;;;;;;AACA;;;;;;;AAAA;AAIA;AAAA;AAAA;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AAAA;;;;;;;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AAIA;AACA;AAGA;AACA;AAAA;AAAA;;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAgBA;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;;;;;;;;AAKA;AAlZA;;AAmBA;AACA;;;AApBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtDA","sources":["webpack://@coral-xyz/app-extension/../../node_modules/ethereum-multicall/dist/esm/multicall.js","webpack://@coral-xyz/app-extension/./src/components/Unlocked/XnftPopovers/Sending.tsx","webpack://@coral-xyz/app-extension/./src/components/common/Account/ImportAccounts.tsx","webpack://@coral-xyz/app-extension/webpack/runtime/getFullHash"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { BigNumber, ethers } from 'ethers';\nimport { defaultAbiCoder } from 'ethers/lib/utils';\nimport { ExecutionType, Networks } from './enums';\nimport { Utils } from './utils';\nvar Multicall = /** @class */ (function () {\n    function Multicall(_options) {\n        this._options = _options;\n        this.ABI = [\n            {\n                constant: false,\n                inputs: [\n                    {\n                        components: [\n                            { name: 'target', type: 'address' },\n                            { name: 'callData', type: 'bytes' },\n                        ],\n                        name: 'calls',\n                        type: 'tuple[]',\n                    },\n                ],\n                name: 'aggregate',\n                outputs: [\n                    { name: 'blockNumber', type: 'uint256' },\n                    { name: 'returnData', type: 'bytes[]' },\n                ],\n                payable: false,\n                stateMutability: 'nonpayable',\n                type: 'function',\n            },\n            {\n                inputs: [\n                    {\n                        internalType: 'bool',\n                        name: 'requireSuccess',\n                        type: 'bool',\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: 'address',\n                                name: 'target',\n                                type: 'address',\n                            },\n                            {\n                                internalType: 'bytes',\n                                name: 'callData',\n                                type: 'bytes',\n                            },\n                        ],\n                        internalType: 'struct Multicall2.Call[]',\n                        name: 'calls',\n                        type: 'tuple[]',\n                    },\n                ],\n                name: 'tryBlockAndAggregate',\n                outputs: [\n                    {\n                        internalType: 'uint256',\n                        name: 'blockNumber',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'bytes32',\n                        name: 'blockHash',\n                        type: 'bytes32',\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: 'bool',\n                                name: 'success',\n                                type: 'bool',\n                            },\n                            {\n                                internalType: 'bytes',\n                                name: 'returnData',\n                                type: 'bytes',\n                            },\n                        ],\n                        internalType: 'struct Multicall2.Result[]',\n                        name: 'returnData',\n                        type: 'tuple[]',\n                    },\n                ],\n                stateMutability: 'nonpayable',\n                type: 'function',\n            },\n        ];\n        if (this._options.web3Instance) {\n            this._executionType = ExecutionType.web3;\n            return;\n        }\n        if (this._options.ethersProvider) {\n            this._executionType = ExecutionType.ethers;\n            return;\n        }\n        if (this._options.nodeUrl) {\n            this._executionType = ExecutionType.customHttp;\n            return;\n        }\n        throw new Error(\n        // tslint:disable-next-line: max-line-length\n        'Your options passed in our incorrect they need to match either `MulticallOptionsEthers`, `MulticallOptionsWeb3` or `MulticallOptionsCustomJsonRpcProvider` interfaces');\n    }\n    /**\n     * Call all the contract calls in 1\n     * @param calls The calls\n     */\n    Multicall.prototype.call = function (contractCallContexts, contractCallOptions) {\n        if (contractCallOptions === void 0) { contractCallOptions = {}; }\n        return __awaiter(this, void 0, void 0, function () {\n            var aggregateResponse, returnObject, response, contractCallsResults, originalContractCallContext, returnObjectResult, method, methodContext, originalContractCallMethodContext, outputTypes, decodedReturnValues;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!Array.isArray(contractCallContexts)) {\n                            contractCallContexts = [contractCallContexts];\n                        }\n                        return [4 /*yield*/, this.execute(this.buildAggregateCallContext(contractCallContexts), contractCallOptions)];\n                    case 1:\n                        aggregateResponse = _a.sent();\n                        returnObject = {\n                            results: {},\n                            blockNumber: aggregateResponse.blockNumber,\n                        };\n                        for (response = 0; response < aggregateResponse.results.length; response++) {\n                            contractCallsResults = aggregateResponse.results[response];\n                            originalContractCallContext = contractCallContexts[contractCallsResults.contractContextIndex];\n                            returnObjectResult = {\n                                originalContractCallContext: Utils.deepClone(originalContractCallContext),\n                                callsReturnContext: [],\n                            };\n                            for (method = 0; method < contractCallsResults.methodResults.length; method++) {\n                                methodContext = contractCallsResults.methodResults[method];\n                                originalContractCallMethodContext = originalContractCallContext.calls[methodContext.contractMethodIndex];\n                                outputTypes = this.findOutputTypesFromAbi(originalContractCallContext.abi, originalContractCallMethodContext.methodName);\n                                if (this._options.tryAggregate && !methodContext.result.success) {\n                                    returnObjectResult.callsReturnContext.push(Utils.deepClone({\n                                        returnValues: [],\n                                        decoded: false,\n                                        reference: originalContractCallMethodContext.reference,\n                                        methodName: originalContractCallMethodContext.methodName,\n                                        methodParameters: originalContractCallMethodContext.methodParameters,\n                                        success: false,\n                                    }));\n                                    continue;\n                                }\n                                if (outputTypes && outputTypes.length > 0) {\n                                    try {\n                                        decodedReturnValues = defaultAbiCoder.decode(\n                                        // tslint:disable-next-line: no-any\n                                        outputTypes, this.getReturnDataFromResult(methodContext.result));\n                                        returnObjectResult.callsReturnContext.push(Utils.deepClone({\n                                            returnValues: this.formatReturnValues(decodedReturnValues),\n                                            decoded: true,\n                                            reference: originalContractCallMethodContext.reference,\n                                            methodName: originalContractCallMethodContext.methodName,\n                                            methodParameters: originalContractCallMethodContext.methodParameters,\n                                            success: true,\n                                        }));\n                                    }\n                                    catch (e) {\n                                        if (!this._options.tryAggregate) {\n                                            throw e;\n                                        }\n                                        returnObjectResult.callsReturnContext.push(Utils.deepClone({\n                                            returnValues: [],\n                                            decoded: false,\n                                            reference: originalContractCallMethodContext.reference,\n                                            methodName: originalContractCallMethodContext.methodName,\n                                            methodParameters: originalContractCallMethodContext.methodParameters,\n                                            success: false,\n                                        }));\n                                    }\n                                }\n                                else {\n                                    returnObjectResult.callsReturnContext.push(Utils.deepClone({\n                                        returnValues: this.getReturnDataFromResult(methodContext.result),\n                                        decoded: false,\n                                        reference: originalContractCallMethodContext.reference,\n                                        methodName: originalContractCallMethodContext.methodName,\n                                        methodParameters: originalContractCallMethodContext.methodParameters,\n                                        success: true,\n                                    }));\n                                }\n                            }\n                            returnObject.results[returnObjectResult.originalContractCallContext.reference] = returnObjectResult;\n                        }\n                        return [2 /*return*/, returnObject];\n                }\n            });\n        });\n    };\n    /**\n     * Get return data from result\n     * @param result The result\n     */\n    // tslint:disable-next-line: no-any\n    Multicall.prototype.getReturnDataFromResult = function (result) {\n        if (this._options.tryAggregate) {\n            return result.returnData;\n        }\n        return result;\n    };\n    /**\n     * Format return values so its always an array\n     * @param decodedReturnValues The decoded return values\n     */\n    // tslint:disable-next-line: no-any\n    Multicall.prototype.formatReturnValues = function (decodedReturnValues) {\n        var decodedReturnResults = decodedReturnValues;\n        if (decodedReturnValues.length === 1) {\n            decodedReturnResults = decodedReturnValues[0];\n        }\n        if (Array.isArray(decodedReturnResults)) {\n            return decodedReturnResults;\n        }\n        return [decodedReturnResults];\n    };\n    /**\n     * Build aggregate call context\n     * @param contractCallContexts The contract call contexts\n     */\n    Multicall.prototype.buildAggregateCallContext = function (contractCallContexts) {\n        var aggregateCallContext = [];\n        for (var contract = 0; contract < contractCallContexts.length; contract++) {\n            var contractContext = contractCallContexts[contract];\n            var executingInterface = new ethers.utils.Interface(JSON.stringify(contractContext.abi));\n            for (var method = 0; method < contractContext.calls.length; method++) {\n                // https://github.com/ethers-io/ethers.js/issues/211\n                var methodContext = contractContext.calls[method];\n                // tslint:disable-next-line: no-unused-expression\n                var encodedData = executingInterface.encodeFunctionData(methodContext.methodName, methodContext.methodParameters);\n                aggregateCallContext.push({\n                    contractContextIndex: Utils.deepClone(contract),\n                    contractMethodIndex: Utils.deepClone(method),\n                    target: contractContext.contractAddress,\n                    encodedData: encodedData,\n                });\n            }\n        }\n        return aggregateCallContext;\n    };\n    /**\n     * Find output types from abi\n     * @param abi The abi\n     * @param methodName The method name\n     */\n    Multicall.prototype.findOutputTypesFromAbi = function (abi, methodName) {\n        var _a;\n        var contract = new ethers.Contract(ethers.constants.AddressZero, abi);\n        methodName = methodName.trim();\n        if (contract.interface.functions[methodName]) {\n            return contract.interface.functions[methodName].outputs;\n        }\n        for (var i = 0; i < abi.length; i++) {\n            if (((_a = abi[i].name) === null || _a === void 0 ? void 0 : _a.trim()) === methodName) {\n                return abi[i].outputs;\n            }\n        }\n        return undefined;\n    };\n    /**\n     * Execute the multicall contract call\n     * @param calls The calls\n     */\n    Multicall.prototype.execute = function (calls, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _a = this._executionType;\n                        switch (_a) {\n                            case ExecutionType.web3: return [3 /*break*/, 1];\n                            case ExecutionType.ethers: return [3 /*break*/, 3];\n                            case ExecutionType.customHttp: return [3 /*break*/, 3];\n                        }\n                        return [3 /*break*/, 5];\n                    case 1: return [4 /*yield*/, this.executeWithWeb3(calls, options)];\n                    case 2: return [2 /*return*/, _b.sent()];\n                    case 3: return [4 /*yield*/, this.executeWithEthersOrCustom(calls, options)];\n                    case 4: return [2 /*return*/, _b.sent()];\n                    case 5: throw new Error(this._executionType + \" is not defined\");\n                }\n            });\n        });\n    };\n    /**\n     * Execute aggregate with web3 instance\n     * @param calls The calls context\n     */\n    Multicall.prototype.executeWithWeb3 = function (calls, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var web3, networkId, contract, callParams, contractResponse, contractResponse;\n            var _a, _b;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        web3 = this.getTypedOptions().web3Instance;\n                        return [4 /*yield*/, web3.eth.net.getId()];\n                    case 1:\n                        networkId = _c.sent();\n                        contract = new web3.eth.Contract(this.ABI, this.getContractBasedOnNetwork(networkId));\n                        callParams = [];\n                        if (options.blockNumber) {\n                            callParams.push(options.blockNumber);\n                        }\n                        if (!this._options.tryAggregate) return [3 /*break*/, 3];\n                        return [4 /*yield*/, (_a = contract.methods\n                                .tryBlockAndAggregate(false, this.mapCallContextToMatchContractFormat(calls)))\n                                .call.apply(_a, callParams)];\n                    case 2:\n                        contractResponse = (_c.sent());\n                        contractResponse.blockNumber = BigNumber.from(contractResponse.blockNumber);\n                        return [2 /*return*/, this.buildUpAggregateResponse(contractResponse, calls)];\n                    case 3: return [4 /*yield*/, (_b = contract.methods\n                            .aggregate(this.mapCallContextToMatchContractFormat(calls)))\n                            .call.apply(_b, callParams)];\n                    case 4:\n                        contractResponse = (_c.sent());\n                        contractResponse.blockNumber = BigNumber.from(contractResponse.blockNumber);\n                        return [2 /*return*/, this.buildUpAggregateResponse(contractResponse, calls)];\n                }\n            });\n        });\n    };\n    /**\n     * Execute with ethers using passed in provider context or custom one\n     * @param calls The calls\n     */\n    Multicall.prototype.executeWithEthersOrCustom = function (calls, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var ethersProvider, customProvider, network, contract, overrideOptions, contractResponse, contractResponse;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        ethersProvider = this.getTypedOptions()\n                            .ethersProvider;\n                        if (!ethersProvider) {\n                            customProvider = this.getTypedOptions();\n                            if (customProvider.nodeUrl) {\n                                ethersProvider = new ethers.providers.JsonRpcProvider(customProvider.nodeUrl);\n                            }\n                            else {\n                                ethersProvider = ethers.getDefaultProvider();\n                            }\n                        }\n                        return [4 /*yield*/, ethersProvider.getNetwork()];\n                    case 1:\n                        network = _a.sent();\n                        contract = new ethers.Contract(this.getContractBasedOnNetwork(network.chainId), this.ABI, ethersProvider);\n                        overrideOptions = {};\n                        if (options.blockNumber) {\n                            overrideOptions = __assign(__assign({}, overrideOptions), { blockTag: Number(options.blockNumber) });\n                        }\n                        if (!this._options.tryAggregate) return [3 /*break*/, 3];\n                        return [4 /*yield*/, contract.callStatic.tryBlockAndAggregate(false, this.mapCallContextToMatchContractFormat(calls), overrideOptions)];\n                    case 2:\n                        contractResponse = (_a.sent());\n                        return [2 /*return*/, this.buildUpAggregateResponse(contractResponse, calls)];\n                    case 3: return [4 /*yield*/, contract.callStatic.aggregate(this.mapCallContextToMatchContractFormat(calls), overrideOptions)];\n                    case 4:\n                        contractResponse = (_a.sent());\n                        return [2 /*return*/, this.buildUpAggregateResponse(contractResponse, calls)];\n                }\n            });\n        });\n    };\n    /**\n     * Build up the aggregated response from the contract response mapping\n     * metadata from the calls\n     * @param contractResponse The contract response\n     * @param calls The calls\n     */\n    Multicall.prototype.buildUpAggregateResponse = function (contractResponse, calls) {\n        var aggregateResponse = {\n            blockNumber: contractResponse.blockNumber.toNumber(),\n            results: [],\n        };\n        var _loop_1 = function (i) {\n            var existingResponse = aggregateResponse.results.find(function (c) { return c.contractContextIndex === calls[i].contractContextIndex; });\n            if (existingResponse) {\n                existingResponse.methodResults.push({\n                    result: contractResponse.returnData[i],\n                    contractMethodIndex: calls[i].contractMethodIndex,\n                });\n            }\n            else {\n                aggregateResponse.results.push({\n                    methodResults: [\n                        {\n                            result: contractResponse.returnData[i],\n                            contractMethodIndex: calls[i].contractMethodIndex,\n                        },\n                    ],\n                    contractContextIndex: calls[i].contractContextIndex,\n                });\n            }\n        };\n        for (var i = 0; i < contractResponse.returnData.length; i++) {\n            _loop_1(i);\n        }\n        return aggregateResponse;\n    };\n    /**\n     * Map call contract to match contract format\n     * @param calls The calls context\n     */\n    Multicall.prototype.mapCallContextToMatchContractFormat = function (calls) {\n        return calls.map(function (call) {\n            return {\n                target: call.target,\n                callData: call.encodedData,\n            };\n        });\n    };\n    /**\n     * Get typed options\n     */\n    Multicall.prototype.getTypedOptions = function () {\n        return this._options;\n    };\n    /**\n     * Get the contract based on the network\n     * @param tryAggregate The tryAggregate\n     * @param network The network\n     */\n    Multicall.prototype.getContractBasedOnNetwork = function (network) {\n        // if they have overriden the multicall custom contract address then use that\n        if (this._options.multicallCustomContractAddress) {\n            return this._options.multicallCustomContractAddress;\n        }\n        switch (network) {\n            case Networks.mainnet:\n            case Networks.kovan:\n            case Networks.rinkeby:\n            case Networks.ropsten:\n            case Networks.goerli:\n                return '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696';\n            case Networks.bsc:\n                return '0xC50F4c1E81c873B2204D7eFf7069Ffec6Fbe136D';\n            case Networks.bsc_testnet:\n                return '0x73CCde5acdb9980f54BcCc0483B28B8b4a537b4A';\n            case Networks.xdai:\n                return '0x2325b72990D81892E0e09cdE5C80DD221F147F8B';\n            case Networks.mumbai:\n                return '0xe9939e7Ea7D7fb619Ac57f648Da7B1D425832631';\n            case Networks.matic:\n                return '0x275617327c958bD06b5D6b871E7f491D76113dd8';\n            case Networks.etherlite:\n                return '0x21681750D7ddCB8d1240eD47338dC984f94AF2aC';\n            case Networks.arbitrum:\n                return '0x80C7DD17B01855a6D2347444a0FCC36136a314de';\n            case Networks.avalancheFuji:\n                return '0x3D015943d2780fE97FE3f69C97edA2CCC094f78c';\n            case Networks.avalancheMainnet:\n                return '0xed386Fe855C1EFf2f843B910923Dd8846E45C5A4';\n            case Networks.fantom:\n                return '0xD98e3dBE5950Ca8Ce5a4b59630a5652110403E5c';\n            case Networks.cronos:\n                return '0x5e954f5972EC6BFc7dECd75779F10d848230345F';\n            case Networks.harmony:\n                return '0x5c41f6817feeb65d7b2178b0b9cebfc8fad97969';\n            case Networks.optimism:\n                return '0xeAa6877139d436Dc6d1f75F3aF15B74662617B2C';\n            case Networks.kovanOptimism:\n                return '0x91c88479F21203444D2B20Aa001f951EC8CF2F68';\n            case Networks.aurora:\n                return '0x04364F8908BDCB4cc7EA881d0DE869398BA849C9';\n            default:\n                throw new Error(\"Network - \" + network + \" doesn't have a multicall contract address defined. Please check your network or deploy your own contract on it.\");\n        }\n    };\n    return Multicall;\n}());\nexport { Multicall };\n","import type { Blockchain } from \"@coral-xyz/common\";\nimport { explorerUrl } from \"@coral-xyz/common\";\nimport {\n  useBlockchainConnectionUrl,\n  useBlockchainExplorer,\n} from \"@coral-xyz/recoil\";\nimport { useCustomTheme } from \"@coral-xyz/themes\";\nimport { Typography } from \"@mui/material\";\n\nimport { Loading, SecondaryButton } from \"../../common\";\n\nexport function Sending({\n  blockchain,\n  signature,\n}: {\n  blockchain: Blockchain;\n  signature: string;\n}) {\n  const theme = useCustomTheme();\n  const explorer = useBlockchainExplorer(blockchain);\n  const connectionUrl = useBlockchainConnectionUrl(blockchain);\n  return (\n <div\n      style={{\n        height: \"264px\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        // 🍌 Change background to black gradient for Sent confirmation modal\n        background: \"linear-gradient(135deg, #000000 0%, #1a1a1a 25%, #0d0d0d 50%, #1a1a1a 75%, #000000 100%)\",\n      }}\n    >\n      <Typography\n        style={{\n          textAlign: \"center\",\n          color: theme.custom.colors.secondary,\n          fontSize: \"16px\",\n          fontWeight: 500,\n          marginTop: \"20px\",\n        }}\n      >\n        Sending\n      </Typography>\n      <div\n        style={{\n          flex: 1,\n          display: \"flex\",\n          justifyContent: \"center\",\n          flexDirection: \"column\",\n        }}\n      >\n        <Loading\n          size={48}\n          iconStyle={{\n            color: theme.custom.colors.primaryButton,\n            display: \"flex\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n          }}\n          thickness={6}\n        />\n      </div>\n      <div\n        style={{\n          marginBottom: \"16px\",\n          marginLeft: \"16px\",\n          marginRight: \"16px\",\n        }}\n      >\n        {explorer && connectionUrl && (\n          <SecondaryButton\n            onClick={() => {\n              window.open(explorerUrl(explorer, signature, connectionUrl));\n            }}\n            label={\"View Explorer\"}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport {\n  accountDerivationPath,\n  Blockchain,\n  DEFAULT_SOLANA_CLUSTER,\n  DerivationPath,\n  derivationPathPrefix,\n  EthereumConnectionUrl,\n  UI_RPC_METHOD_KEYRING_STORE_READ_ALL_PUBKEYS,\n  UI_RPC_METHOD_PREVIEW_PUBKEYS,\n} from \"@coral-xyz/common\";\nimport { useBackgroundClient } from \"@coral-xyz/recoil\";\nimport { useCustomTheme } from \"@coral-xyz/themes\";\nimport Ethereum from \"@ledgerhq/hw-app-eth\";\nimport Solana from \"@ledgerhq/hw-app-solana\";\nimport type Transport from \"@ledgerhq/hw-transport\";\nimport {\n  Box,\n  List,\n  ListItemButton,\n  ListItemText,\n  MenuItem,\n} from \"@mui/material\";\nimport * as anchor from \"@project-serum/anchor\";\nimport { Connection as SolanaConnection, PublicKey } from \"@solana/web3.js\";\nimport { BigNumber, ethers } from \"ethers\";\n\nimport {\n  Checkbox,\n  Header,\n  Loading,\n  PrimaryButton,\n  SubtextParagraph,\n  walletAddressDisplay,\n} from \"../../common\";\nimport { TextInput } from \"../Inputs\";\n\nconst { base58: bs58 } = ethers.utils;\n\ntype Account = {\n  publicKey: string;\n  balance: BigNumber;\n  // The account index for the derivation path\n  index: number;\n};\n\nexport type SelectedAccount = {\n  index: number;\n  publicKey: string;\n};\n\nconst LOAD_PUBKEY_AMOUNT = 20;\nconst DISPLAY_PUBKEY_AMOUNT = 5;\n\nexport function ImportAccounts({\n  blockchain,\n  mnemonic,\n  transport,\n  onNext,\n  onError,\n  allowMultiple = true,\n}: {\n  blockchain: Blockchain;\n  mnemonic?: string;\n  transport?: Transport | null;\n  onNext: (\n    selectedAccounts: SelectedAccount[],\n    derivationPath: DerivationPath,\n    mnemonic?: string\n  ) => void;\n  onError?: (error: Error) => void;\n  allowMultiple?: boolean;\n}) {\n  const background = useBackgroundClient();\n  const theme = useCustomTheme();\n  const [accounts, setAccounts] = useState<Array<Account>>([]);\n  const [selectedAccounts, setSelectedAccounts] = useState<SelectedAccount[]>(\n    []\n  );\n  const [ledgerLocked, setLedgerLocked] = useState(false);\n  const [importedPubkeys, setImportedPubkeys] = useState<string[]>([]);\n  const [derivationPath, setDerivationPath] = useState<DerivationPath>(\n    DerivationPath.Default\n  );\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const blockchainKeyrings = await background.request({\n          method: UI_RPC_METHOD_KEYRING_STORE_READ_ALL_PUBKEYS,\n          params: [],\n        });\n        const keyring = blockchainKeyrings[blockchain];\n        setImportedPubkeys(\n          Object.values(keyring)\n            .flat()\n            .map((a: any) => a.publicKey)\n        );\n      } catch {\n        // Keyring store locked, either onboarding or left open\n      }\n    })();\n  }, [background, blockchain]);\n\n  //\n  // Load a list of accounts and their associated balances\n  //\n  useEffect(() => {\n    if (!derivationPath) return;\n\n    let loaderFn;\n    if (mnemonic) {\n      // Loading accounts from a mnemonic\n      loaderFn = (derivationPath: DerivationPath) =>\n        loadMnemonicPublicKeys(mnemonic, derivationPath);\n    } else if (transport) {\n      // Loading accounts from a Ledger\n      loaderFn = (derivationPath: DerivationPath) =>\n        loadLedgerPublicKeys(transport, derivationPath);\n    } else {\n      return;\n    }\n\n    loaderFn(derivationPath)\n      .then(async (publicKeys: string[]) => {\n        const balances = await loadBalances(publicKeys);\n        setAccounts(\n          balances.sort((a, b) =>\n            b.balance.lt(a.balance) ? -1 : b.balance.eq(a.balance) ? 0 : 1\n          )\n        );\n      })\n      .catch((error) => {\n        // Probably Ledger error, i.e. app is not opened\n        console.error(error);\n        if (onError) {\n          // Call custom error handler if one was passed\n          onError(error);\n        } else {\n          throw error;\n        }\n      });\n  }, [mnemonic, transport, derivationPath]);\n\n  //\n  // Clear accounts and selected acounts on change of derivation path.\n  //\n  useEffect(() => {\n    setAccounts([]);\n    setSelectedAccounts([]);\n  }, [derivationPath]);\n\n  //\n  // Load balances for accounts that have been loaded\n  //\n  const loadBalances = async (publicKeys: string[]) => {\n    if (blockchain === Blockchain.SOLANA) {\n      // TODO use Backpack configured value\n      const solanaMainnetRpc =\n        process.env.DEFAULT_SOLANA_CONNECTION_URL || DEFAULT_SOLANA_CLUSTER;\n      const solanaConnection = new SolanaConnection(\n        solanaMainnetRpc,\n        \"confirmed\"\n      );\n      const accounts = (\n        await anchor.utils.rpc.getMultipleAccounts(\n          solanaConnection,\n          publicKeys.map((p) => new PublicKey(p))\n        )\n      ).map((result, index) => {\n        return {\n          publicKey: publicKeys[index],\n          balance: result\n            ? BigNumber.from(result.account.lamports)\n            : BigNumber.from(0),\n          index,\n        };\n      });\n      return accounts;\n    } else if (blockchain === Blockchain.ETHEREUM) {\n      // TODO use Backpack configured value\n      const ethereumMainnetRpc =\n        process.env.DEFAULT_ETHEREUM_CONNECTION_URL ||\n        EthereumConnectionUrl.MAINNET;\n      const ethereumProvider = new ethers.providers.JsonRpcProvider(\n        ethereumMainnetRpc\n      );\n      const balances = await Promise.all(\n        publicKeys.map((p) => ethereumProvider.getBalance(p))\n      );\n      return publicKeys.map((p, index) => {\n        return { publicKey: p, balance: balances[index], index };\n      });\n    } else {\n      throw new Error(\"invalid blockchain\");\n    }\n  };\n\n  //\n  // Load accounts for the given mnemonic. This is passed to the ImportAccounts\n  // component and called whenever the derivation path is changed with the selector.\n  //\n  const loadMnemonicPublicKeys = async (\n    mnemonic: string,\n    derivationPath: DerivationPath\n  ) => {\n    return await background.request({\n      method: UI_RPC_METHOD_PREVIEW_PUBKEYS,\n      params: [blockchain, mnemonic, derivationPath, LOAD_PUBKEY_AMOUNT],\n    });\n  };\n\n  //\n  // Load accounts for a ledger.\n  //\n  const loadLedgerPublicKeys = async (\n    transport: Transport,\n    derivationPath: DerivationPath\n  ): Promise<string[]> => {\n    const publicKeys = [];\n    setLedgerLocked(true);\n\n    const ledger = {\n      [Blockchain.SOLANA]: new Solana(transport),\n      [Blockchain.ETHEREUM]: new Ethereum(transport),\n    }[blockchain];\n\n    // Add remaining accounts\n    for (let account = 0; account < LOAD_PUBKEY_AMOUNT; account += 1) {\n      const path = accountDerivationPath(blockchain, derivationPath, account);\n      publicKeys.push((await ledger.getAddress(path)).address);\n    }\n\n    setLedgerLocked(false);\n    return publicKeys.map((p) =>\n      blockchain === Blockchain.SOLANA ? bs58.encode(p) : p.toString()\n    );\n  };\n\n  //\n  // Handles checkbox clicks to select accounts to import.\n  //\n  const handleSelect = (index: number, publicKey: string) => () => {\n    const currentIndex = selectedAccounts.findIndex((a) => a.index === index);\n    let newSelectedAccounts = [...selectedAccounts];\n    if (currentIndex === -1) {\n      // Adding the account\n      if (allowMultiple) {\n        newSelectedAccounts.push({ index, publicKey });\n      } else {\n        newSelectedAccounts = [{ index, publicKey }];\n      }\n    } else {\n      // Removing the account\n      newSelectedAccounts.splice(currentIndex, 1);\n    }\n    // Sort by account indices\n    newSelectedAccounts.sort((a, b) => a.index - b.index);\n    setSelectedAccounts(newSelectedAccounts);\n  };\n\n  const derivationPathOptions = {\n    [Blockchain.SOLANA]: [\n      {\n        path: DerivationPath.Bip44,\n        label: derivationPathPrefix(Blockchain.SOLANA, DerivationPath.Bip44),\n      },\n      {\n        path: DerivationPath.Bip44Change,\n        label: derivationPathPrefix(\n          Blockchain.SOLANA,\n          DerivationPath.Bip44Change\n        ),\n      },\n    ]\n      // Note: We only allow importing the deprecated sollet derivation path for\n      //       hot wallets. This UI is hidden behind a local storage flag we\n      //       expect people to manually set, since this derivation path was only\n      //       used by mostly technical early Solana users.\n      .concat(\n        mnemonic && window.localStorage.getItem(\"sollet\")\n          ? [\n              {\n                path: DerivationPath.SolletDeprecated,\n                label:\n                  derivationPathPrefix(\n                    Blockchain.SOLANA,\n                    DerivationPath.SolletDeprecated\n                  ) + \" (deprecated)\",\n              },\n            ]\n          : []\n      ),\n    [Blockchain.ETHEREUM]: [\n      {\n        path: DerivationPath.Bip44,\n        label: derivationPathPrefix(Blockchain.ETHEREUM, DerivationPath.Bip44),\n      },\n      {\n        path: DerivationPath.Bip44Change,\n        label: derivationPathPrefix(\n          Blockchain.ETHEREUM,\n          DerivationPath.Bip44Change\n        ),\n      },\n    ],\n  }[blockchain];\n\n  // Symbol for balance displays\n  const symbol = {\n    [Blockchain.SOLANA]: \"BANANA\",\n    [Blockchain.ETHEREUM]: \"ETH\",\n  }[blockchain];\n\n  // Decimals for balance displays\n  const decimals = {\n    [Blockchain.SOLANA]: 9,\n    [Blockchain.ETHEREUM]: 18,\n  }[blockchain];\n\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        height: \"100%\",\n        justifyContent: \"space-between\",\n      }}\n    >\n      <Box>\n        <Box\n          sx={{\n            marginLeft: \"24px\",\n            marginRight: \"24px\",\n            marginTop: \"24px\",\n          }}\n        >\n          <Header text={`Import account${allowMultiple ? \"s\" : \"\"}`} />\n          <SubtextParagraph>\n            Select which account{allowMultiple ? \"s\" : \"\"} you'd like to import.\n          </SubtextParagraph>\n        </Box>\n        <div style={{ margin: \"16px\" }}>\n          <TextInput\n            placeholder=\"Derivation Path\"\n            value={derivationPath}\n            setValue={(e) => setDerivationPath(e.target.value)}\n            select={true}\n            disabled={ledgerLocked}\n          >\n            {derivationPathOptions.map((o, idx) => (\n              <MenuItem value={o.path} key={idx}>\n                {o.label}\n              </MenuItem>\n            ))}\n          </TextInput>\n        </div>\n        {accounts.length > 0 && (\n          <>\n            <List\n              sx={{\n                color: theme.custom.colors.fontColor,\n                background: theme.custom.colors.background,\n                borderRadius: \"12px\",\n                marginLeft: \"16px\",\n                marginRight: \"16px\",\n                paddingTop: \"8px\",\n                paddingBottom: \"8px\",\n              }}\n            >\n              {accounts\n                .slice(0, DISPLAY_PUBKEY_AMOUNT)\n                .map(({ publicKey, balance, index }) => (\n                  <ListItemButton\n                    key={publicKey.toString()}\n                    onClick={handleSelect(index, publicKey)}\n                    sx={{\n                      display: \"flex\",\n                      paddinLeft: \"16px\",\n                      paddingRight: \"16px\",\n                      paddingTop: \"5px\",\n                      paddingBottom: \"5px\",\n                    }}\n                    disableRipple\n                    disabled={importedPubkeys.includes(publicKey.toString())}\n                  >\n                    <Box style={{ display: \"flex\", width: \"100%\" }}>\n                      <div\n                        style={{\n                          display: \"flex\",\n                          justifyContent: \"center\",\n                          flexDirection: \"column\",\n                        }}\n                      >\n                        <Checkbox\n                          edge=\"start\"\n                          checked={\n                            selectedAccounts.some((a) => a.index === index) ||\n                            importedPubkeys.includes(publicKey.toString())\n                          }\n                          tabIndex={-1}\n                          disabled={importedPubkeys.includes(\n                            publicKey.toString()\n                          )}\n                          disableRipple\n                          style={{ marginLeft: 0 }}\n                        />\n                      </div>\n                      <ListItemText\n                        id={publicKey.toString()}\n                        primary={walletAddressDisplay(publicKey)}\n                        sx={{\n                          marginLeft: \"8px\",\n                          fontSize: \"14px\",\n                          lineHeight: \"32px\",\n                          fontWeight: 500,\n                        }}\n                      />\n                      <ListItemText\n                        sx={{\n                          color: theme.custom.colors.secondary,\n                          textAlign: \"right\",\n                        }}\n                        primary={`${\n                          balance\n                            ? (+ethers.utils.formatUnits(\n                                balance,\n                                decimals\n                              )).toFixed(4)\n                            : 0\n                        } ${symbol}`}\n                      />\n                    </Box>\n                  </ListItemButton>\n                ))}\n            </List>\n          </>\n        )}\n      </Box>\n      {accounts.length === 0 && <Loading />}\n      <Box\n        sx={{\n          mt: \"12px\",\n          ml: \"16px\",\n          mr: \"16px\",\n          mb: \"16px\",\n        }}\n      >\n        <PrimaryButton\n          label={`Import Account${allowMultiple ? \"s\" : \"\"}`}\n          onClick={() => onNext(selectedAccounts, derivationPath, mnemonic)}\n          disabled={selectedAccounts.length === 0}\n        />\n      </Box>\n    </Box>\n  );\n}\n","__webpack_require__.h = function() { return \"6fc9fc9e445d91122083\"; }"],"names":[],"sourceRoot":""}